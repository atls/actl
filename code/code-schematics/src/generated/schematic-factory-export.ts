// Auto-generated file
/* eslint-disable */
export const schematicFactoryCjsBase64 =
  'InVzZSBzdHJpY3QiOwp2YXIgX19jcmVhdGUgPSBPYmplY3QuY3JlYXRlOwp2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5Owp2YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7CnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzOwp2YXIgX19nZXRQcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mOwp2YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTsKdmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7CiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpCiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pOwp9Owp2YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4gewogIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSAib2JqZWN0IiB8fCB0eXBlb2YgZnJvbSA9PT0gImZ1bmN0aW9uIikgewogICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKQogICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KQogICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTsKICB9CiAgcmV0dXJuIHRvOwp9Owp2YXIgX190b0VTTSA9IChtb2QsIGlzTm9kZU1vZGUsIHRhcmdldCkgPT4gKHRhcmdldCA9IG1vZCAhPSBudWxsID8gX19jcmVhdGUoX19nZXRQcm90b09mKG1vZCkpIDoge30sIF9fY29weVByb3BzKAogIC8vIElmIHRoZSBpbXBvcnRlciBpcyBpbiBub2RlIGNvbXBhdGliaWxpdHkgbW9kZSBvciB0aGlzIGlzIG5vdCBhbiBFU00KICAvLyBmaWxlIHRoYXQgaGFzIGJlZW4gY29udmVydGVkIHRvIGEgQ29tbW9uSlMgZmlsZSB1c2luZyBhIEJhYmVsLQogIC8vIGNvbXBhdGlibGUgdHJhbnNmb3JtIChpLmUuICJfX2VzTW9kdWxlIiBoYXMgbm90IGJlZW4gc2V0KSwgdGhlbiBzZXQKICAvLyAiZGVmYXVsdCIgdG8gdGhlIENvbW1vbkpTICJtb2R1bGUuZXhwb3J0cyIgZm9yIG5vZGUgY29tcGF0aWJpbGl0eS4KICBpc05vZGVNb2RlIHx8ICFtb2QgfHwgIW1vZC5fX2VzTW9kdWxlID8gX19kZWZQcm9wKHRhcmdldCwgImRlZmF1bHQiLCB7IHZhbHVlOiBtb2QsIGVudW1lcmFibGU6IHRydWUgfSkgOiB0YXJnZXQsCiAgbW9kCikpOwp2YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCAiX19lc01vZHVsZSIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7CgovLyBzcmMvc2NoZW1hdGljL2luZGV4LnRzCnZhciBpbmRleF9leHBvcnRzID0ge307Cl9fZXhwb3J0KGluZGV4X2V4cG9ydHMsIHsKICBtYWluOiAoKSA9PiBtYWluCn0pOwptb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhpbmRleF9leHBvcnRzKTsKCi8vIHNyYy9zY2hlbWF0aWMvcHJvamVjdC9wcm9qZWN0LmZhY3RvcnkudHMKdmFyIGltcG9ydF9zY2hlbWF0aWNzOSA9IHJlcXVpcmUoIkBhbmd1bGFyLWRldmtpdC9zY2hlbWF0aWNzIik7CnZhciBpbXBvcnRfc2NoZW1hdGljczEwID0gcmVxdWlyZSgiQGFuZ3VsYXItZGV2a2l0L3NjaGVtYXRpY3MiKTsKdmFyIGltcG9ydF9zY2hlbWF0aWNzMTEgPSByZXF1aXJlKCJAYW5ndWxhci1kZXZraXQvc2NoZW1hdGljcyIpOwoKLy8gc3JjL3NjaGVtYXRpYy91dGlscy9qc29uLnV0aWxzLnRzCnZhciBpbXBvcnRfc3RyaXBfanNvbl9jb21tZW50cyA9IF9fdG9FU00ocmVxdWlyZSgic3RyaXAtanNvbi1jb21tZW50cyIpLCAxKTsKdmFyIHNlcmlhbGl6ZUpzb24gPSAoanNvbikgPT4gYCR7SlNPTi5zdHJpbmdpZnkoanNvbiwgbnVsbCwgMil9CmA7CnZhciByZWFkSnNvbkluVHJlZSA9IChob3N0LCBwYXRoKSA9PiB7CiAgaWYgKCFob3N0LmV4aXN0cyhwYXRoKSkgewogICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZmluZCAke3BhdGh9YCk7CiAgfQogIGNvbnN0IGNvbnRlbnRzID0gKDAsIGltcG9ydF9zdHJpcF9qc29uX2NvbW1lbnRzLmRlZmF1bHQpKGhvc3QucmVhZChwYXRoKT8udG9TdHJpbmcoInV0Zi04IikgfHwgIiIpOwogIHRyeSB7CiAgICByZXR1cm4gSlNPTi5wYXJzZShjb250ZW50cyk7CiAgfSBjYXRjaCAoZSkgewogICAgY29uc3QgZXJyb3IgPSBlOwogICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgcGFyc2UgJHtwYXRofTogJHtlcnJvci5tZXNzYWdlfWApOwogIH0KfTsKdmFyIHVwZGF0ZUpzb25JblRyZWUgPSAocGF0aCwgY2FsbGJhY2spID0+IChob3N0LCBjb250ZXh0KSA9PiB7CiAgaWYgKCFob3N0LmV4aXN0cyhwYXRoKSkgewogICAgaG9zdC5jcmVhdGUocGF0aCwgc2VyaWFsaXplSnNvbihjYWxsYmFjayh7fSwgY29udGV4dCkpKTsKICAgIHJldHVybiBob3N0OwogIH0KICBob3N0Lm92ZXJ3cml0ZSgKICAgIHBhdGgsCiAgICBzZXJpYWxpemVKc29uKGNhbGxiYWNrKHJlYWRKc29uSW5UcmVlKGhvc3QsIHBhdGgpLCBjb250ZXh0KSkKICApOwogIHJldHVybiBob3N0Owp9OwoKLy8gc3JjL3NjaGVtYXRpYy91dGlscy90c2NvbmZpZy51dGlscy50cwp2YXIgdXBkYXRlVHNDb25maWdJblRyZWUgPSAoY29tcGlsZXJPcHRpb25zKSA9PiB1cGRhdGVKc29uSW5UcmVlKCJ0c2NvbmZpZy5qc29uIiwgKHRzY29uZmlnKSA9PiAoewogIC4uLnRzY29uZmlnLAogIGNvbXBpbGVyT3B0aW9ucwp9KSk7CgovLyBzcmMvc2NoZW1hdGljL3J1bGVzL3VwZGF0ZS10cy1jb25maWcucnVsZS50cwp2YXIgdXBkYXRlVHNDb25maWdSdWxlID0gYXN5bmMgKCkgPT4gewogIGNvbnN0IHsgdHNDb25maWcgfSA9IGF3YWl0IGltcG9ydCgiQGF0bHMvY29kZS1ydW50aW1lIik7CiAgcmV0dXJuIHVwZGF0ZVRzQ29uZmlnSW5UcmVlKHsKICAgIC4uLnRzQ29uZmlnLmNvbXBpbGVyT3B0aW9ucwogIH0pOwp9OwoKLy8gc3JjL3NjaGVtYXRpYy9zb3VyY2VzL2dlbmVyYXRlLWNvbW1vbi5zb3VyY2UudHMKdmFyIGltcG9ydF9jb3JlID0gcmVxdWlyZSgiQGFuZ3VsYXItZGV2a2l0L2NvcmUiKTsKdmFyIGltcG9ydF9zY2hlbWF0aWNzID0gcmVxdWlyZSgiQGFuZ3VsYXItZGV2a2l0L3NjaGVtYXRpY3MiKTsKdmFyIGltcG9ydF9zY2hlbWF0aWNzMiA9IHJlcXVpcmUoIkBhbmd1bGFyLWRldmtpdC9zY2hlbWF0aWNzIik7CnZhciBpbXBvcnRfc2NoZW1hdGljczMgPSByZXF1aXJlKCJAYW5ndWxhci1kZXZraXQvc2NoZW1hdGljcyIpOwp2YXIgaW1wb3J0X3NjaGVtYXRpY3M0ID0gcmVxdWlyZSgiQGFuZ3VsYXItZGV2a2l0L3NjaGVtYXRpY3MiKTsKdmFyIGdlbmVyYXRlQ29tbW9uU291cmNlID0gKG9wdGlvbnMpID0+ICgwLCBpbXBvcnRfc2NoZW1hdGljcy5hcHBseSkoKDAsIGltcG9ydF9zY2hlbWF0aWNzNC51cmwpKCIuLi90ZW1wbGF0ZXMvY29tbW9uIiksIFsKICAoMCwgaW1wb3J0X3NjaGVtYXRpY3MyLnRlbXBsYXRlKSh7CiAgICAuLi5pbXBvcnRfY29yZS5zdHJpbmdzLAogICAgLi4ub3B0aW9ucywKICAgIGRvdDogIi4iCiAgfSksCiAgKDAsIGltcG9ydF9zY2hlbWF0aWNzMy5tb3ZlKSgiLi8iKQpdKTsKCi8vIHNyYy9zY2hlbWF0aWMvc291cmNlcy9nZW5lcmF0ZS1wcm9qZWN0LXNwZWNpZmljLnNvdXJjZS50cwp2YXIgaW1wb3J0X25vZGVfZnMgPSByZXF1aXJlKCJub2RlOmZzIik7CnZhciBpbXBvcnRfbm9kZV9wYXRoID0gcmVxdWlyZSgibm9kZTpwYXRoIik7CnZhciBpbXBvcnRfY29yZTIgPSByZXF1aXJlKCJAYW5ndWxhci1kZXZraXQvY29yZSIpOwp2YXIgaW1wb3J0X3NjaGVtYXRpY3M1ID0gcmVxdWlyZSgiQGFuZ3VsYXItZGV2a2l0L3NjaGVtYXRpY3MiKTsKdmFyIGltcG9ydF9zY2hlbWF0aWNzNiA9IHJlcXVpcmUoIkBhbmd1bGFyLWRldmtpdC9zY2hlbWF0aWNzIik7CnZhciBpbXBvcnRfc2NoZW1hdGljczcgPSByZXF1aXJlKCJAYW5ndWxhci1kZXZraXQvc2NoZW1hdGljcyIpOwp2YXIgaW1wb3J0X3NjaGVtYXRpY3M4ID0gcmVxdWlyZSgiQGFuZ3VsYXItZGV2a2l0L3NjaGVtYXRpY3MiKTsKdmFyIGdlbmVyYXRlUHJvamVjdFNwZWNpZmljU291cmNlID0gKG9wdGlvbnMpID0+IHsKICBjb25zdCB7IG5hbWU6IHByb2plY3ROYW1lIH0gPSBKU09OLnBhcnNlKAogICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG4vbm8tc3luYwogICAgKDAsIGltcG9ydF9ub2RlX2ZzLnJlYWRGaWxlU3luYykoKDAsIGltcG9ydF9ub2RlX3BhdGguam9pbikob3B0aW9ucy5jd2QsICJwYWNrYWdlLmpzb24iKSwgInV0Zi04IikKICApOwogIHJldHVybiAoMCwgaW1wb3J0X3NjaGVtYXRpY3M1LmFwcGx5KSgoMCwgaW1wb3J0X3NjaGVtYXRpY3M2LnVybCkoKDAsIGltcG9ydF9ub2RlX3BhdGguam9pbikoIi4uL3RlbXBsYXRlcyIsIG9wdGlvbnMudHlwZSkpLCBbCiAgICAoMCwgaW1wb3J0X3NjaGVtYXRpY3M3LnRlbXBsYXRlKSh7CiAgICAgIC4uLmltcG9ydF9jb3JlMi5zdHJpbmdzLAogICAgICAuLi5vcHRpb25zLAogICAgICBwcm9qZWN0TmFtZSwKICAgICAgZG90OiAiLiIKICAgIH0pLAogICAgKDAsIGltcG9ydF9zY2hlbWF0aWNzOC5tb3ZlKSgiLi8iKQogIF0pOwp9OwoKLy8gc3JjL3NjaGVtYXRpYy9wcm9qZWN0L3Byb2plY3QuZmFjdG9yeS50cwp2YXIgbWFpbiA9IChvcHRpb25zKSA9PiAoMCwgaW1wb3J0X3NjaGVtYXRpY3MxMC5jaGFpbikoWwogIHVwZGF0ZVRzQ29uZmlnUnVsZSwKICAoMCwgaW1wb3J0X3NjaGVtYXRpY3MxMS5tZXJnZVdpdGgpKGdlbmVyYXRlQ29tbW9uU291cmNlKG9wdGlvbnMpLCBpbXBvcnRfc2NoZW1hdGljczkuTWVyZ2VTdHJhdGVneS5PdmVyd3JpdGUpLAogICgwLCBpbXBvcnRfc2NoZW1hdGljczExLm1lcmdlV2l0aCkoZ2VuZXJhdGVQcm9qZWN0U3BlY2lmaWNTb3VyY2Uob3B0aW9ucyksIGltcG9ydF9zY2hlbWF0aWNzOS5NZXJnZVN0cmF0ZWd5Lk92ZXJ3cml0ZSkKXSk7Ci8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZToKMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7CiAgbWFpbgp9KTsK'

export const writeSchematicFactory = async (path: string) => {
  const content = Buffer.from(schematicFactoryCjsBase64, 'base64').toString('utf-8')
  const fs = await import('fs/promises')
  fs.writeFile(path, content)
}
