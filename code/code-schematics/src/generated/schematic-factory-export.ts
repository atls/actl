// Auto-generated file
/* eslint-disable */
export const schematicFactoryCjsBase64 =
  '"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/json/utils.js
var require_utils = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/json/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isJsonObject = isJsonObject;
    exports2.isJsonArray = isJsonArray;
    function isJsonObject(value) {
      return value != null && typeof value === "object" && !Array.isArray(value);
    }
    function isJsonArray(value) {
      return Array.isArray(value);
    }
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/json/schema/utility.js
var require_utility = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/json/schema/utility.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getTypesOfSchema = getTypesOfSchema;
    var utils_1 = require_utils();
    var allTypes = ["string", "integer", "number", "object", "array", "boolean", "null"];
    function getTypesOfSchema(schema) {
      if (!schema) {
        return /* @__PURE__ */ new Set();
      }
      if (schema === true) {
        return new Set(allTypes);
      }
      let potentials;
      if (typeof schema.type === "string") {
        potentials = /* @__PURE__ */ new Set([schema.type]);
      } else if (Array.isArray(schema.type)) {
        potentials = new Set(schema.type);
      } else if ((0, utils_1.isJsonArray)(schema.enum)) {
        potentials = /* @__PURE__ */ new Set();
        for (const v of schema.enum) {
          switch (typeof v) {
            case "string":
            case "number":
            case "boolean":
              potentials.add(typeof v);
              break;
            case "object":
              if (Array.isArray(v)) {
                potentials.add("array");
              } else if (v === null) {
                potentials.add("null");
              } else {
                potentials.add("object");
              }
              break;
          }
        }
      } else {
        potentials = new Set(allTypes);
      }
      if ((0, utils_1.isJsonObject)(schema.not)) {
        const notTypes = getTypesOfSchema(schema.not);
        potentials = new Set([...potentials].filter((p) => !notTypes.has(p)));
      }
      if (Array.isArray(schema.allOf)) {
        for (const sub of schema.allOf) {
          const types = getTypesOfSchema(sub);
          potentials = new Set([...types].filter((t) => potentials.has(t)));
        }
      }
      if (Array.isArray(schema.oneOf)) {
        let options = /* @__PURE__ */ new Set();
        for (const sub of schema.oneOf) {
          const types = getTypesOfSchema(sub);
          options = /* @__PURE__ */ new Set([...options, ...types]);
        }
        potentials = new Set([...options].filter((o) => potentials.has(o)));
      }
      if (Array.isArray(schema.anyOf)) {
        let options = /* @__PURE__ */ new Set();
        for (const sub of schema.anyOf) {
          const types = getTypesOfSchema(sub);
          options = /* @__PURE__ */ new Set([...options, ...types]);
        }
        potentials = new Set([...options].filter((o) => potentials.has(o)));
      }
      if (schema.properties) {
        potentials.add("object");
      } else if (schema.items) {
        potentials.add("array");
      }
      return potentials;
    }
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/json/schema/transforms.js
var require_transforms = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/json/schema/transforms.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.addUndefinedDefaults = addUndefinedDefaults;
    var utils_1 = require_utils();
    var utility_1 = require_utility();
    function addUndefinedDefaults(value, _pointer, schema) {
      if (typeof schema === "boolean" || schema === void 0) {
        return value;
      }
      value ??= schema.default;
      const types = (0, utility_1.getTypesOfSchema)(schema);
      if (types.size === 0) {
        return value;
      }
      let type;
      if (types.size === 1) {
        type = Array.from(types)[0];
      } else if (types.size === 2 && types.has("array") && types.has("object")) {
        type = "array";
      } else if (schema.properties && types.has("object")) {
        type = "object";
      } else if (schema.items && types.has("array")) {
        type = "array";
      } else {
        return value;
      }
      if (type === "array") {
        return value == void 0 ? [] : value;
      }
      if (type === "object") {
        let newValue;
        if (value == void 0) {
          newValue = {};
        } else if ((0, utils_1.isJsonObject)(value)) {
          newValue = value;
        } else {
          return value;
        }
        if (!(0, utils_1.isJsonObject)(schema.properties)) {
          return newValue;
        }
        for (const [propName, schemaObject] of Object.entries(schema.properties)) {
          if (propName === "$schema" || !(0, utils_1.isJsonObject)(schemaObject)) {
            continue;
          }
          const value2 = newValue[propName];
          if (value2 === void 0) {
            newValue[propName] = schemaObject.default;
          } else if ((0, utils_1.isJsonObject)(value2)) {
            const propertySchemas = schemaObject.oneOf || schemaObject.anyOf;
            const allProperties = Object.keys(value2);
            const adjustedSchema = (0, utils_1.isJsonArray)(propertySchemas) && propertySchemas.find((s) => {
              if (!(0, utils_1.isJsonObject)(s)) {
                return false;
              }
              const schemaType = (0, utility_1.getTypesOfSchema)(s);
              if (schemaType.size === 1 && schemaType.has("object") && (0, utils_1.isJsonObject)(s.properties)) {
                const properties = Object.keys(s.properties);
                return allProperties.every((key) => properties.includes(key));
              }
              return false;
            });
            if (adjustedSchema && (0, utils_1.isJsonObject)(adjustedSchema)) {
              newValue[propName] = addUndefinedDefaults(value2, _pointer, adjustedSchema);
            }
          }
        }
        return newValue;
      }
      return value;
    }
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/json/schema/interface.js
var require_interface = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/json/schema/interface.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/json/schema/pointer.js
var require_pointer = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/json/schema/pointer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.buildJsonPointer = buildJsonPointer;
    exports2.joinJsonPointer = joinJsonPointer;
    exports2.parseJsonPointer = parseJsonPointer;
    function buildJsonPointer(fragments) {
      return "/" + fragments.map((f) => {
        return f.replace(/~/g, "~0").replace(/\//g, "~1");
      }).join("/");
    }
    function joinJsonPointer(root, ...others) {
      if (root == "/") {
        return buildJsonPointer(others);
      }
      return root + buildJsonPointer(others);
    }
    function parseJsonPointer(pointer) {
      if (pointer === "") {
        return [];
      }
      if (pointer.charAt(0) !== "/") {
        throw new Error("Relative pointer: " + pointer);
      }
      return pointer.substring(1).split(/\//).map((str) => str.replace(/~1/g, "/").replace(/~0/g, "~"));
    }
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/exception.js
var require_exception = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/exception.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PathIsFileException = exports2.PathIsDirectoryException = exports2.FileAlreadyExistException = exports2.FileDoesNotExistException = exports2.UnknownException = exports2.BaseException = void 0;
    var BaseException = class extends Error {
      constructor(message = "") {
        super(message);
      }
    };
    exports2.BaseException = BaseException;
    var UnknownException = class extends BaseException {
      constructor(message) {
        super(message);
      }
    };
    exports2.UnknownException = UnknownException;
    var FileDoesNotExistException = class extends BaseException {
      constructor(path) {
        super(`Path "${path}" does not exist.`);
      }
    };
    exports2.FileDoesNotExistException = FileDoesNotExistException;
    var FileAlreadyExistException = class extends BaseException {
      constructor(path) {
        super(`Path "${path}" already exist.`);
      }
    };
    exports2.FileAlreadyExistException = FileAlreadyExistException;
    var PathIsDirectoryException = class extends BaseException {
      constructor(path) {
        super(`Path "${path}" is a directory.`);
      }
    };
    exports2.PathIsDirectoryException = PathIsDirectoryException;
    var PathIsFileException = class extends BaseException {
      constructor(path) {
        super(`Path "${path}" is a file.`);
      }
    };
    exports2.PathIsFileException = PathIsFileException;
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/utils/literals.js
var require_literals = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/utils/literals.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.oneLine = oneLine;
    exports2.indentBy = indentBy;
    exports2.stripIndent = stripIndent;
    exports2.stripIndents = stripIndents;
    exports2.trimNewlines = trimNewlines;
    function oneLine(strings3, ...values) {
      const endResult = String.raw(strings3, ...values);
      return endResult.replace(/(?:\r?\n(?:\s*))+/gm, " ").trim();
    }
    function indentBy(indentations) {
      let i = "";
      while (indentations--) {
        i += " ";
      }
      return (strings3, ...values) => {
        return i + stripIndent(strings3, ...values).replace(/\n/g, "\n" + i);
      };
    }
    function stripIndent(strings3, ...values) {
      const endResult = String.raw(strings3, ...values);
      const match = endResult.match(/^[ \t]*(?=\S)/gm);
      if (match === null) {
        return endResult;
      }
      const indent = Math.min(...match.map((el) => el.length));
      const regexp = new RegExp("^[ \\t]{" + indent + "}", "gm");
      return (indent > 0 ? endResult.replace(regexp, "") : endResult).trim();
    }
    function stripIndents(strings3, ...values) {
      return String.raw(strings3, ...values).split("\n").map((line) => line.trim()).join("\n").trim();
    }
    function trimNewlines(strings3, ...values) {
      const endResult = String.raw(strings3, ...values);
      return endResult.replace(/^(?:\r?\n)+/, "").replace(/(?:\r?\n(?:\s*))$/, "");
    }
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/utils/strings.js
var require_strings = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/utils/strings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decamelize = decamelize;
    exports2.dasherize = dasherize;
    exports2.camelize = camelize;
    exports2.classify = classify;
    exports2.underscore = underscore;
    exports2.capitalize = capitalize;
    exports2.levenshtein = levenshtein;
    var STRING_DASHERIZE_REGEXP = /[ _]/g;
    var STRING_DECAMELIZE_REGEXP = /([a-z\d])([A-Z])/g;
    var STRING_CAMELIZE_REGEXP = /(-|_|\.|\s)+(.)?/g;
    var STRING_UNDERSCORE_REGEXP_1 = /([a-z\d])([A-Z]+)/g;
    var STRING_UNDERSCORE_REGEXP_2 = /-|\s+/g;
    function decamelize(str) {
      return str.replace(STRING_DECAMELIZE_REGEXP, "$1_$2").toLowerCase();
    }
    function dasherize(str) {
      return decamelize(str).replace(STRING_DASHERIZE_REGEXP, "-");
    }
    function camelize(str) {
      return str.replace(STRING_CAMELIZE_REGEXP, (_match, _separator, chr) => {
        return chr ? chr.toUpperCase() : "";
      }).replace(/^([A-Z])/, (match) => match.toLowerCase());
    }
    function classify(str) {
      return str.split(".").map((part) => capitalize(camelize(part))).join("");
    }
    function underscore(str) {
      return str.replace(STRING_UNDERSCORE_REGEXP_1, "$1_$2").replace(STRING_UNDERSCORE_REGEXP_2, "_").toLowerCase();
    }
    function capitalize(str) {
      return str.charAt(0).toUpperCase() + str.slice(1);
    }
    function levenshtein(a, b) {
      if (a.length == 0) {
        return b.length;
      }
      if (b.length == 0) {
        return a.length;
      }
      const matrix = [];
      for (let i = 0; i <= b.length; i++) {
        matrix[i] = [i];
      }
      for (let j = 0; j <= a.length; j++) {
        matrix[0][j] = j;
      }
      for (let i = 1; i <= b.length; i++) {
        for (let j = 1; j <= a.length; j++) {
          if (b.charAt(i - 1) == a.charAt(j - 1)) {
            matrix[i][j] = matrix[i - 1][j - 1];
          } else {
            matrix[i][j] = Math.min(
              matrix[i - 1][j - 1] + 1,
              // substitution
              matrix[i][j - 1] + 1,
              // insertion
              matrix[i - 1][j] + 1
            );
          }
        }
      }
      return matrix[b.length][a.length];
    }
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/utils/object.js
var require_object = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/utils/object.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.deepCopy = deepCopy;
    var copySymbol = Symbol();
    function deepCopy(value) {
      if (Array.isArray(value)) {
        return value.map((o) => deepCopy(o));
      } else if (value && typeof value === "object") {
        const valueCasted = value;
        if (valueCasted[copySymbol]) {
          return valueCasted[copySymbol];
        }
        if (valueCasted["toJSON"]) {
          return JSON.parse(valueCasted["toJSON"]());
        }
        const copy = Object.create(Object.getPrototypeOf(valueCasted));
        valueCasted[copySymbol] = copy;
        for (const key of Object.getOwnPropertyNames(valueCasted)) {
          copy[key] = deepCopy(valueCasted[key]);
        }
        delete valueCasted[copySymbol];
        return copy;
      } else {
        return value;
      }
    }
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/utils/template.js
var require_template = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/utils/template.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.templateParser = templateParser;
    exports2.template = template3;
    var source_map_1 = require("source-map");
    var kInterpolateRe = /<%=([\s\S]+?)%>/g;
    var kCommentRe = /<%#([\s\S]+?)%>/g;
    var kEscapeRe = /<%-([\s\S]+?)%>/g;
    var kEvaluateRe = /<%([\s\S]+?)%>/g;
    var kHtmlEscapes = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;",
      "`": "&#96;"
    };
    var reUnescapedHtml = new RegExp(`[${Object.keys(kHtmlEscapes).join("")}]`, "g");
    function _positionFor(content, offset) {
      let line = 1;
      let column = 0;
      for (let i = 0; i < offset - 1; i++) {
        if (content[i] == "\n") {
          line++;
          column = 0;
        } else {
          column++;
        }
      }
      return {
        line,
        column
      };
    }
    function templateParser(sourceText, fileName) {
      const children = [];
      const reExpressions = [kEscapeRe, kCommentRe, kInterpolateRe, kEvaluateRe];
      const reDelimiters = RegExp(reExpressions.map((x) => x.source).join("|") + "|$", "g");
      const parsed = sourceText.split(reDelimiters);
      let offset = 0;
      let start = _positionFor(sourceText, offset);
      let end;
      const increment = reExpressions.length + 1;
      for (let i = 0; i < parsed.length; i += increment) {
        const [content, escape, comment, interpolate, evaluate] = parsed.slice(i, i + increment);
        if (content) {
          end = _positionFor(sourceText, offset + content.length);
          offset += content.length;
          children.push({ kind: "content", content, start, end });
          start = end;
        }
        if (escape) {
          end = _positionFor(sourceText, offset + escape.length + 5);
          offset += escape.length + 5;
          children.push({ kind: "escape", expression: escape, start, end });
          start = end;
        }
        if (comment) {
          end = _positionFor(sourceText, offset + comment.length + 5);
          offset += comment.length + 5;
          children.push({ kind: "comment", text: comment, start, end });
          start = end;
        }
        if (interpolate) {
          end = _positionFor(sourceText, offset + interpolate.length + 5);
          offset += interpolate.length + 5;
          children.push({
            kind: "interpolate",
            expression: interpolate,
            start,
            end
          });
          start = end;
        }
        if (evaluate) {
          end = _positionFor(sourceText, offset + evaluate.length + 5);
          offset += evaluate.length + 5;
          children.push({ kind: "evaluate", expression: evaluate, start, end });
          start = end;
        }
      }
      return {
        fileName,
        content: sourceText,
        children
      };
    }
    function templateFast(ast, options) {
      const module3 = options && options.module ? "module.exports.default =" : "";
      const reHtmlEscape = reUnescapedHtml.source.replace(/[']/g, "\\\\\\'");
      return `
    return ${module3} function(obj) {
      obj || (obj = {});
      let __t;
      let __p = '';
      const __escapes = ${JSON.stringify(kHtmlEscapes)};
      const __escapesre = new RegExp('${reHtmlEscape}', 'g');

      const __e = function(s) {
        return s ? s.replace(__escapesre, function(key) { return __escapes[key]; }) : '';
      };
      with (obj) {
        ${ast.children.map((node) => {
        switch (node.kind) {
          case "content":
            return `__p += ${JSON.stringify(node.content)};`;
          case "interpolate":
            return `__p += ((__t = (${node.expression})) == null) ? '' : __t;`;
          case "escape":
            return `__p += __e(${node.expression});`;
          case "evaluate":
            return node.expression;
        }
      }).join("\n")}
      }

      return __p;
    };
  `;
    }
    function templateWithSourceMap(ast, options) {
      const sourceUrl = ast.fileName;
      const module3 = options && options.module ? "module.exports.default =" : "";
      const reHtmlEscape = reUnescapedHtml.source.replace(/[']/g, "\\\\\\'");
      const preamble = new source_map_1.SourceNode(1, 0, sourceUrl, "").add(new source_map_1.SourceNode(1, 0, sourceUrl, [
        `return ${module3} function(obj) {
`,
        "  obj || (obj = {});\n",
        "  let __t;\n",
        '  let __p = "";\n',
        `  const __escapes = ${JSON.stringify(kHtmlEscapes)};
`,
        `  const __escapesre = new RegExp('${reHtmlEscape}', 'g');
`,
        `
`,
        `  const __e = function(s) { `,
        `    return s ? s.replace(__escapesre, function(key) { return __escapes[key]; }) : '';`,
        `  };
`,
        `  with (obj) {
`
      ]));
      const end = ast.children.length ? ast.children[ast.children.length - 1].end : { line: 0, column: 0 };
      const nodes = ast.children.reduce((chunk, node) => {
        let code2 = "";
        switch (node.kind) {
          case "content":
            code2 = [
              new source_map_1.SourceNode(node.start.line, node.start.column, sourceUrl, "__p = __p"),
              ...node.content.split("\n").map((line, i, arr) => {
                return new source_map_1.SourceNode(node.start.line + i, i == 0 ? node.start.column : 0, sourceUrl, "\n    + " + JSON.stringify(line + (i == arr.length - 1 ? "" : "\n")));
              }),
              new source_map_1.SourceNode(node.end.line, node.end.column, sourceUrl, ";\n")
            ];
            break;
          case "interpolate":
            code2 = [
              new source_map_1.SourceNode(node.start.line, node.start.column, sourceUrl, "__p += ((__t = "),
              ...node.expression.split("\n").map((line, i, arr) => {
                return new source_map_1.SourceNode(node.start.line + i, i == 0 ? node.start.column : 0, sourceUrl, line + (i == arr.length - 1 ? "" : "\n"));
              }),
              new source_map_1.SourceNode(node.end.line, node.end.column, sourceUrl, ') == null ? "" : __t);\n')
            ];
            break;
          case "escape":
            code2 = [
              new source_map_1.SourceNode(node.start.line, node.start.column, sourceUrl, "__p += __e("),
              ...node.expression.split("\n").map((line, i, arr) => {
                return new source_map_1.SourceNode(node.start.line + i, i == 0 ? node.start.column : 0, sourceUrl, line + (i == arr.length - 1 ? "" : "\n"));
              }),
              new source_map_1.SourceNode(node.end.line, node.end.column, sourceUrl, ");\n")
            ];
            break;
          case "evaluate":
            code2 = [
              ...node.expression.split("\n").map((line, i, arr) => {
                return new source_map_1.SourceNode(node.start.line + i, i == 0 ? node.start.column : 0, sourceUrl, line + (i == arr.length - 1 ? "" : "\n"));
              }),
              new source_map_1.SourceNode(node.end.line, node.end.column, sourceUrl, "\n")
            ];
            break;
        }
        return chunk.add(new source_map_1.SourceNode(node.start.line, node.start.column, sourceUrl, code2));
      }, preamble).add(new source_map_1.SourceNode(end.line, end.column, sourceUrl, ["  };\n", "\n", "  return __p;\n", "}\n"]));
      const code = nodes.toStringWithSourceMap({
        file: sourceUrl,
        sourceRoot: options && options.sourceRoot || "."
      });
      code.map.setSourceContent(sourceUrl, ast.content);
      return code.code + "\n//# sourceMappingURL=data:application/json;base64," + Buffer.from(code.map.toString()).toString("base64");
    }
    function template3(content, options) {
      const sourceUrl = options && options.sourceURL || "ejs";
      const ast = templateParser(content, sourceUrl);
      let source;
      if (options && options.sourceMap) {
        source = templateWithSourceMap(ast, options);
      } else {
        source = templateFast(ast, options);
      }
      const fn = Function("module", source);
      const module3 = options && options.module ? options.module === true ? { exports: {} } : options.module : null;
      const result = fn(module3);
      result.source = source;
      return result;
    }
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/utils/partially-ordered-set.js
var require_partially_ordered_set = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/utils/partially-ordered-set.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PartiallyOrderedSet = exports2.CircularDependencyFoundException = exports2.DependencyNotFoundException = void 0;
    var exception_1 = require_exception();
    var DependencyNotFoundException = class extends exception_1.BaseException {
      constructor() {
        super("One of the dependencies is not part of the set.");
      }
    };
    exports2.DependencyNotFoundException = DependencyNotFoundException;
    var CircularDependencyFoundException = class extends exception_1.BaseException {
      constructor() {
        super("Circular dependencies found.");
      }
    };
    exports2.CircularDependencyFoundException = CircularDependencyFoundException;
    var PartiallyOrderedSet = class {
      _items = /* @__PURE__ */ new Map();
      _checkCircularDependencies(item, deps) {
        if (deps.has(item)) {
          throw new CircularDependencyFoundException();
        }
        deps.forEach((dep) => this._checkCircularDependencies(item, this._items.get(dep) || /* @__PURE__ */ new Set()));
      }
      clear() {
        this._items.clear();
      }
      has(item) {
        return this._items.has(item);
      }
      get size() {
        return this._items.size;
      }
      forEach(callbackfn, thisArg) {
        for (const x of this) {
          callbackfn.call(thisArg, x, x, this);
        }
      }
      /**
       * Returns an iterable of [v,v] pairs for every value `v` in the set.
       */
      *entries() {
        for (const item of this) {
          yield [item, item];
        }
      }
      /**
       * Despite its name, returns an iterable of the values in the set,
       */
      keys() {
        return this.values();
      }
      /**
       * Returns an iterable of values in the set.
       */
      values() {
        return this[Symbol.iterator]();
      }
      add(item, deps = /* @__PURE__ */ new Set()) {
        if (Array.isArray(deps)) {
          deps = new Set(deps);
        }
        if (this._items.has(item)) {
          const itemDeps = this._items.get(item) || /* @__PURE__ */ new Set();
          let equal = true;
          for (const dep of deps) {
            if (!itemDeps.has(dep)) {
              equal = false;
              break;
            }
          }
          if (equal) {
            for (const dep of itemDeps) {
              if (!deps.has(dep)) {
                equal = false;
                break;
              }
            }
          }
          if (equal) {
            return this;
          } else {
            this._items.delete(item);
          }
        }
        for (const dep of deps) {
          if (!this._items.has(dep)) {
            throw new DependencyNotFoundException();
          }
        }
        this._checkCircularDependencies(item, deps);
        this._items.set(item, new Set(deps));
        return this;
      }
      delete(item) {
        if (!this._items.has(item)) {
          return false;
        }
        this._items.forEach((value) => value.delete(item));
        return this._items.delete(item);
      }
      *[Symbol.iterator]() {
        const copy = new Map(this._items);
        for (const [key, value] of copy.entries()) {
          copy.set(key, new Set(value));
        }
        while (copy.size > 0) {
          const run = [];
          for (const [item, deps] of copy.entries()) {
            if (deps.size == 0) {
              run.push(item);
            }
          }
          for (const item of run) {
            copy.forEach((s) => s.delete(item));
            copy.delete(item);
            yield item;
          }
          if (run.length == 0) {
            throw new CircularDependencyFoundException();
          }
        }
        return void 0;
      }
      get [Symbol.toStringTag]() {
        return "Set";
      }
    };
    exports2.PartiallyOrderedSet = PartiallyOrderedSet;
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/utils/priority-queue.js
var require_priority_queue = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/utils/priority-queue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PriorityQueue = void 0;
    var PriorityQueue = class {
      _comparator;
      _items = new Array();
      constructor(_comparator) {
        this._comparator = _comparator;
      }
      clear() {
        this._items = new Array();
      }
      push(item) {
        const index = this._items.findIndex((existing) => this._comparator(item, existing) <= 0);
        if (index === -1) {
          this._items.push(item);
        } else {
          this._items.splice(index, 0, item);
        }
      }
      pop() {
        if (this._items.length === 0) {
          return void 0;
        }
        return this._items.splice(0, 1)[0];
      }
      peek() {
        if (this._items.length === 0) {
          return void 0;
        }
        return this._items[0];
      }
      get size() {
        return this._items.length;
      }
      toArray() {
        return this._items.slice();
      }
    };
    exports2.PriorityQueue = PriorityQueue;
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/utils/lang.js
var require_lang = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/utils/lang.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isPromise = isPromise;
    function isPromise(obj) {
      return !!obj && typeof obj.then === "function";
    }
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/utils/index.js
var require_utils2 = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/utils/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || /* @__PURE__ */ function() {
      var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.strings = exports2.tags = void 0;
    var tags = __importStar(require_literals());
    exports2.tags = tags;
    var strings3 = __importStar(require_strings());
    exports2.strings = strings3;
    __exportStar(require_object(), exports2);
    __exportStar(require_template(), exports2);
    __exportStar(require_partially_ordered_set(), exports2);
    __exportStar(require_priority_queue(), exports2);
    __exportStar(require_lang(), exports2);
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/json/schema/visitor.js
var require_visitor = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/json/schema/visitor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.visitJson = visitJson;
    exports2.visitJsonSchema = visitJsonSchema;
    var rxjs_1 = require("rxjs");
    var pointer_1 = require_pointer();
    function _getObjectSubSchema(schema, key) {
      if (typeof schema !== "object" || schema === null) {
        return void 0;
      }
      if (typeof schema.properties == "object" || schema.type == "object") {
        if (typeof schema.properties == "object" && typeof schema.properties[key] == "object") {
          return schema.properties[key];
        }
        if (typeof schema.additionalProperties == "object") {
          return schema.additionalProperties;
        }
        return void 0;
      }
      if (typeof schema.items == "object" || schema.type == "array") {
        return typeof schema.items == "object" ? schema.items : void 0;
      }
      return void 0;
    }
    function _visitJsonRecursive(json, visitor, ptr, schema, refResolver, context, root) {
      if (schema === true || schema === false) {
        schema = void 0;
      }
      if (schema && schema.hasOwnProperty("$ref") && typeof schema["$ref"] == "string") {
        if (refResolver) {
          const resolved = refResolver(schema["$ref"], context);
          schema = resolved.schema;
          context = resolved.context;
        }
      }
      const value = visitor(json, ptr, schema, root);
      return ((0, rxjs_1.isObservable)(value) ? value : (0, rxjs_1.of)(value)).pipe((0, rxjs_1.concatMap)((value2) => {
        if (Array.isArray(value2)) {
          return (0, rxjs_1.concat)((0, rxjs_1.from)(value2).pipe((0, rxjs_1.mergeMap)((item, i) => {
            return _visitJsonRecursive(item, visitor, (0, pointer_1.joinJsonPointer)(ptr, "" + i), _getObjectSubSchema(schema, "" + i), refResolver, context, root || value2).pipe((0, rxjs_1.tap)((x) => value2[i] = x));
          }), (0, rxjs_1.ignoreElements)()), (0, rxjs_1.of)(value2));
        } else if (typeof value2 == "object" && value2 !== null) {
          return (0, rxjs_1.concat)((0, rxjs_1.from)(Object.getOwnPropertyNames(value2)).pipe((0, rxjs_1.mergeMap)((key) => {
            return _visitJsonRecursive(value2[key], visitor, (0, pointer_1.joinJsonPointer)(ptr, key), _getObjectSubSchema(schema, key), refResolver, context, root || value2).pipe((0, rxjs_1.tap)((x) => {
              const descriptor = Object.getOwnPropertyDescriptor(value2, key);
              if (descriptor && descriptor.writable && value2[key] !== x) {
                value2[key] = x;
              }
            }));
          }), (0, rxjs_1.ignoreElements)()), (0, rxjs_1.of)(value2));
        } else {
          return (0, rxjs_1.of)(value2);
        }
      }));
    }
    function visitJson(json, visitor, schema, refResolver, context) {
      return _visitJsonRecursive(json, visitor, (0, pointer_1.buildJsonPointer)([]), schema, refResolver, context);
    }
    function visitJsonSchema(schema, visitor) {
      if (schema === false || schema === true) {
        return;
      }
      const keywords = {
        additionalItems: true,
        items: true,
        contains: true,
        additionalProperties: true,
        propertyNames: true,
        not: true
      };
      const arrayKeywords = {
        items: true,
        allOf: true,
        anyOf: true,
        oneOf: true
      };
      const propsKeywords = {
        definitions: true,
        properties: true,
        patternProperties: true,
        additionalProperties: true,
        dependencies: true,
        items: true
      };
      function _traverse(schema2, jsonPtr, rootSchema, parentSchema, keyIndex) {
        if (schema2 && typeof schema2 == "object" && !Array.isArray(schema2)) {
          visitor(schema2, jsonPtr, parentSchema, keyIndex);
          for (const key of Object.keys(schema2)) {
            const sch = schema2[key];
            if (key in propsKeywords) {
              if (sch && typeof sch == "object") {
                for (const prop of Object.keys(sch)) {
                  _traverse(sch[prop], (0, pointer_1.joinJsonPointer)(jsonPtr, key, prop), rootSchema, schema2, prop);
                }
              }
            } else if (key in keywords) {
              _traverse(sch, (0, pointer_1.joinJsonPointer)(jsonPtr, key), rootSchema, schema2, key);
            } else if (key in arrayKeywords) {
              if (Array.isArray(sch)) {
                for (let i = 0; i < sch.length; i++) {
                  _traverse(sch[i], (0, pointer_1.joinJsonPointer)(jsonPtr, key, "" + i), rootSchema, sch, "" + i);
                }
              }
            } else if (Array.isArray(sch)) {
              for (let i = 0; i < sch.length; i++) {
                _traverse(sch[i], (0, pointer_1.joinJsonPointer)(jsonPtr, key, "" + i), rootSchema, sch, "" + i);
              }
            }
          }
        }
      }
      _traverse(schema, (0, pointer_1.buildJsonPointer)([]), schema);
    }
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/json/schema/registry.js
var require_registry = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/json/schema/registry.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || /* @__PURE__ */ function() {
      var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CoreSchemaRegistry = exports2.SchemaValidationException = void 0;
    var ajv_1 = __importDefault(require("ajv"));
    var ajv_formats_1 = __importDefault(require("ajv-formats"));
    var http = __importStar(require("http"));
    var https = __importStar(require("https"));
    var rxjs_1 = require("rxjs");
    var Url = __importStar(require("url"));
    var exception_1 = require_exception();
    var utils_1 = require_utils2();
    var utils_2 = require_utils();
    var utility_1 = require_utility();
    var visitor_1 = require_visitor();
    var SchemaValidationException = class _SchemaValidationException extends exception_1.BaseException {
      errors;
      constructor(errors, baseMessage = "Schema validation failed with the following errors:") {
        if (!errors || errors.length === 0) {
          super("Schema validation failed.");
          this.errors = [];
          return;
        }
        const messages = _SchemaValidationException.createMessages(errors);
        super(`${baseMessage}
  ${messages.join("\n  ")}`);
        this.errors = errors;
      }
      static createMessages(errors) {
        if (!errors || errors.length === 0) {
          return [];
        }
        const messages = errors.map((err) => {
          let message = `Data path ${JSON.stringify(err.instancePath)} ${err.message}`;
          if (err.params) {
            switch (err.keyword) {
              case "additionalProperties":
                message += `(${err.params.additionalProperty})`;
                break;
              case "enum":
                message += `. Allowed values are: ${err.params.allowedValues?.map((v) => `"${v}"`).join(", ")}`;
                break;
            }
          }
          return message + ".";
        });
        return messages;
      }
    };
    exports2.SchemaValidationException = SchemaValidationException;
    var CoreSchemaRegistry = class _CoreSchemaRegistry {
      _ajv;
      _uriCache = /* @__PURE__ */ new Map();
      _uriHandlers = /* @__PURE__ */ new Set();
      _pre = new utils_1.PartiallyOrderedSet();
      _post = new utils_1.PartiallyOrderedSet();
      _currentCompilationSchemaInfo;
      _smartDefaultKeyword = false;
      _promptProvider;
      _sourceMap = /* @__PURE__ */ new Map();
      constructor(formats = []) {
        this._ajv = new ajv_1.default({
          strict: false,
          loadSchema: (uri) => this._fetch(uri),
          passContext: true
        });
        (0, ajv_formats_1.default)(this._ajv);
        for (const format of formats) {
          this.addFormat(format);
        }
      }
      async _fetch(uri) {
        const maybeSchema = this._uriCache.get(uri);
        if (maybeSchema) {
          return maybeSchema;
        }
        for (const handler of this._uriHandlers) {
          let handlerResult = handler(uri);
          if (handlerResult === null || handlerResult === void 0) {
            continue;
          }
          if ((0, rxjs_1.isObservable)(handlerResult)) {
            handlerResult = (0, rxjs_1.lastValueFrom)(handlerResult);
          }
          const value = await handlerResult;
          this._uriCache.set(uri, value);
          return value;
        }
        return new Promise((resolve, reject) => {
          const url3 = new Url.URL(uri);
          const client = url3.protocol === "https:" ? https : http;
          client.get(url3, (res) => {
            if (!res.statusCode || res.statusCode >= 300) {
              res.resume();
              reject(new Error(`Request failed. Status Code: ${res.statusCode}`));
            } else {
              res.setEncoding("utf8");
              let data = "";
              res.on("data", (chunk) => {
                data += chunk;
              });
              res.on("end", () => {
                try {
                  const json = JSON.parse(data);
                  this._uriCache.set(uri, json);
                  resolve(json);
                } catch (err) {
                  reject(err);
                }
              });
            }
          });
        });
      }
      /**
       * Add a transformation step before the validation of any Json.
       * @param {JsonVisitor} visitor The visitor to transform every value.
       * @param {JsonVisitor[]} deps A list of other visitors to run before.
       */
      addPreTransform(visitor, deps) {
        this._pre.add(visitor, deps);
      }
      /**
       * Add a transformation step after the validation of any Json. The JSON will not be validated
       * after the POST, so if transformations are not compatible with the Schema it will not result
       * in an error.
       * @param {JsonVisitor} visitor The visitor to transform every value.
       * @param {JsonVisitor[]} deps A list of other visitors to run before.
       */
      addPostTransform(visitor, deps) {
        this._post.add(visitor, deps);
      }
      _resolver(ref, validate) {
        if (!validate || !ref) {
          return {};
        }
        const schema = validate.schemaEnv.root.schema;
        const id = typeof schema === "object" ? schema.$id : null;
        let fullReference = ref;
        if (typeof id === "string") {
          fullReference = Url.resolve(id, ref);
          if (ref.startsWith("#")) {
            fullReference = id + fullReference;
          }
        }
        const resolvedSchema = this._ajv.getSchema(fullReference);
        return {
          context: resolvedSchema?.schemaEnv.validate,
          schema: resolvedSchema?.schema
        };
      }
      /**
       * Flatten the Schema, resolving and replacing all the refs. Makes it into a synchronous schema
       * that is also easier to traverse. Does not cache the result.
       *
       * Producing a flatten schema document does not in all cases produce a schema with identical behavior to the original.
       * See: https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.appendix.B.2
       *
       * @param schema The schema or URI to flatten.
       * @returns An Observable of the flattened schema object.
       * @private since 11.2 without replacement.
       */
      async \u0275flatten(schema) {
        this._ajv.removeSchema(schema);
        this._currentCompilationSchemaInfo = void 0;
        const validate = await this._ajv.compileAsync(schema);
        const self2 = this;
        function visitor(current, pointer, parentSchema, index) {
          if (current && parentSchema && index && (0, utils_2.isJsonObject)(current) && Object.prototype.hasOwnProperty.call(current, "$ref") && typeof current["$ref"] == "string") {
            const resolved = self2._resolver(current["$ref"], validate);
            if (resolved.schema) {
              parentSchema[index] = resolved.schema;
            }
          }
        }
        const schemaCopy = (0, utils_1.deepCopy)(validate.schema);
        (0, visitor_1.visitJsonSchema)(schemaCopy, visitor);
        return schemaCopy;
      }
      /**
       * Compile and return a validation function for the Schema.
       *
       * @param schema The schema to validate. If a string, will fetch the schema before compiling it
       * (using schema as a URI).
       */
      async compile(schema) {
        const validate = await this._compile(schema);
        return (value, options) => validate(value, options);
      }
      async _compile(schema) {
        if (typeof schema === "boolean") {
          return async (data) => ({ success: schema, data });
        }
        const schemaInfo = {
          smartDefaultRecord: /* @__PURE__ */ new Map(),
          promptDefinitions: []
        };
        this._ajv.removeSchema(schema);
        let validator;
        try {
          this._currentCompilationSchemaInfo = schemaInfo;
          validator = this._ajv.compile(schema);
        } catch (e) {
          if (!(e instanceof ajv_1.default.MissingRefError)) {
            throw e;
          }
          validator = await this._ajv.compileAsync(schema);
        } finally {
          this._currentCompilationSchemaInfo = void 0;
        }
        return async (data, options) => {
          const validationOptions = {
            withPrompts: true,
            applyPostTransforms: true,
            applyPreTransforms: true,
            ...options
          };
          const validationContext = {
            promptFieldsWithValue: /* @__PURE__ */ new Set()
          };
          if (validationOptions.applyPreTransforms) {
            for (const visitor of this._pre.values()) {
              data = await (0, rxjs_1.lastValueFrom)((0, visitor_1.visitJson)(data, visitor, schema, this._resolver.bind(this), validator));
            }
          }
          await this._applySmartDefaults(data, schemaInfo.smartDefaultRecord);
          if (validationOptions.withPrompts) {
            const visitor = (value, pointer) => {
              if (value !== void 0) {
                validationContext.promptFieldsWithValue.add(pointer);
              }
              return value;
            };
            if (typeof schema === "object") {
              await (0, rxjs_1.lastValueFrom)((0, visitor_1.visitJson)(data, visitor, schema, this._resolver.bind(this), validator));
            }
            const definitions = schemaInfo.promptDefinitions.filter((def) => !validationContext.promptFieldsWithValue.has(def.id));
            if (definitions.length > 0) {
              await this._applyPrompts(data, definitions);
            }
          }
          try {
            const success = await validator.call(validationContext, data);
            if (!success) {
              return { data, success, errors: validator.errors ?? [] };
            }
          } catch (error) {
            if (error instanceof ajv_1.default.ValidationError) {
              return { data, success: false, errors: error.errors };
            }
            throw error;
          }
          if (validationOptions.applyPostTransforms) {
            for (const visitor of this._post.values()) {
              data = await (0, rxjs_1.lastValueFrom)((0, visitor_1.visitJson)(data, visitor, schema, this._resolver.bind(this), validator));
            }
          }
          return { data, success: true };
        };
      }
      addFormat(format) {
        this._ajv.addFormat(format.name, format.formatter);
      }
      addSmartDefaultProvider(source, provider) {
        if (this._sourceMap.has(source)) {
          throw new Error(source);
        }
        this._sourceMap.set(source, provider);
        if (!this._smartDefaultKeyword) {
          this._smartDefaultKeyword = true;
          this._ajv.addKeyword({
            keyword: "$default",
            errors: false,
            valid: true,
            compile: (schema, _parentSchema, it) => {
              const compilationSchemInfo = this._currentCompilationSchemaInfo;
              if (compilationSchemInfo === void 0) {
                return () => true;
              }
              const pathArray = this.normalizeDataPathArr(it);
              compilationSchemInfo.smartDefaultRecord.set(JSON.stringify(pathArray), schema);
              return () => true;
            },
            metaSchema: {
              type: "object",
              properties: {
                "$source": { type: "string" }
              },
              additionalProperties: true,
              required: ["$source"]
            }
          });
        }
      }
      registerUriHandler(handler) {
        this._uriHandlers.add(handler);
      }
      usePromptProvider(provider) {
        const isSetup = !!this._promptProvider;
        this._promptProvider = provider;
        if (isSetup) {
          return;
        }
        this._ajv.addKeyword({
          keyword: "x-prompt",
          errors: false,
          valid: true,
          compile: (schema, parentSchema, it) => {
            const compilationSchemInfo = this._currentCompilationSchemaInfo;
            if (!compilationSchemInfo) {
              return () => true;
            }
            const path = "/" + this.normalizeDataPathArr(it).join("/");
            let type;
            let items;
            let message;
            if (typeof schema == "string") {
              message = schema;
            } else {
              message = schema.message;
              type = schema.type;
              items = schema.items;
            }
            const propertyTypes = (0, utility_1.getTypesOfSchema)(parentSchema);
            if (!type) {
              if (propertyTypes.size === 1 && propertyTypes.has("boolean")) {
                type = "confirmation";
              } else if (Array.isArray(parentSchema.enum)) {
                type = "list";
              } else if (propertyTypes.size === 1 && propertyTypes.has("array") && parentSchema.items && Array.isArray(parentSchema.items.enum)) {
                type = "list";
              } else {
                type = "input";
              }
            }
            let multiselect;
            if (type === "list") {
              multiselect = schema.multiselect === void 0 ? propertyTypes.size === 1 && propertyTypes.has("array") : schema.multiselect;
              const enumValues = multiselect ? parentSchema.items && parentSchema.items.enum : parentSchema.enum;
              if (!items && Array.isArray(enumValues)) {
                items = [];
                for (const value of enumValues) {
                  if (typeof value == "string") {
                    items.push(value);
                  } else if (typeof value == "object") {
                  } else {
                    items.push({ label: value.toString(), value });
                  }
                }
              }
            }
            const definition = {
              id: path,
              type,
              message,
              raw: schema,
              items,
              multiselect,
              propertyTypes,
              default: typeof parentSchema.default == "object" && parentSchema.default !== null && !Array.isArray(parentSchema.default) ? void 0 : parentSchema.default,
              async validator(data) {
                try {
                  const result = await it.self.validate(parentSchema, data);
                  if (result) {
                    return result;
                  } else if (it.self.errors?.length) {
                    return it.self.errors[0].message;
                  }
                } catch (e) {
                  const validationError = e;
                  if (Array.isArray(validationError.errors) && validationError.errors.length) {
                    return validationError.errors[0].message;
                  }
                }
                return false;
              }
            };
            compilationSchemInfo.promptDefinitions.push(definition);
            return function() {
              if (this && this.promptFieldsWithValue) {
                this.promptFieldsWithValue.add(path);
              }
              return true;
            };
          },
          metaSchema: {
            oneOf: [
              { type: "string" },
              {
                type: "object",
                properties: {
                  "type": { type: "string" },
                  "message": { type: "string" }
                },
                additionalProperties: true,
                required: ["message"]
              }
            ]
          }
        });
      }
      async _applyPrompts(data, prompts) {
        const provider = this._promptProvider;
        if (!provider) {
          return;
        }
        const answers = await (0, rxjs_1.lastValueFrom)((0, rxjs_1.from)(provider(prompts)));
        for (const path in answers) {
          const pathFragments = path.split("/").slice(1);
          _CoreSchemaRegistry._set(data, pathFragments, answers[path], null, void 0, true);
        }
      }
      static _set(data, fragments, value, parent = null, parentProperty, force) {
        for (let index = 0; index < fragments.length; index++) {
          const fragment = fragments[index];
          if (/^i\d+$/.test(fragment)) {
            if (!Array.isArray(data)) {
              return;
            }
            for (let dataIndex = 0; dataIndex < data.length; dataIndex++) {
              _CoreSchemaRegistry._set(data[dataIndex], fragments.slice(index + 1), value, data, `${dataIndex}`);
            }
            return;
          }
          if (!data && parent !== null && parentProperty) {
            data = parent[parentProperty] = {};
          }
          parent = data;
          parentProperty = fragment;
          data = data[fragment];
        }
        if (parent && parentProperty && (force || parent[parentProperty] === void 0)) {
          parent[parentProperty] = value;
        }
      }
      async _applySmartDefaults(data, smartDefaults) {
        for (const [pointer, schema] of smartDefaults.entries()) {
          const fragments = JSON.parse(pointer);
          const source = this._sourceMap.get(schema.$source);
          if (!source) {
            continue;
          }
          let value = source(schema);
          if ((0, rxjs_1.isObservable)(value)) {
            value = await (0, rxjs_1.lastValueFrom)(value);
          }
          _CoreSchemaRegistry._set(data, fragments, value);
        }
      }
      useXDeprecatedProvider(onUsage) {
        this._ajv.addKeyword({
          keyword: "x-deprecated",
          validate: (schema, _data, _parentSchema, dataCxt) => {
            if (schema) {
              onUsage(`Option "${dataCxt?.parentDataProperty}" is deprecated${typeof schema == "string" ? ": " + schema : "."}`);
            }
            return true;
          },
          errors: false
        });
      }
      normalizeDataPathArr(it) {
        return it.dataPathArr.slice(1, it.dataLevel + 1).map((p) => typeof p === "number" ? p : p.str.replace(/"/g, ""));
      }
    };
    exports2.CoreSchemaRegistry = CoreSchemaRegistry;
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/json/schema/schema.js
var require_schema = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/json/schema/schema.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isJsonSchema = isJsonSchema;
    exports2.mergeSchemas = mergeSchemas;
    var utils_1 = require_utils();
    function isJsonSchema(value) {
      return (0, utils_1.isJsonObject)(value) || value === false || value === true;
    }
    function mergeSchemas(...schemas) {
      return schemas.reduce((prev, curr) => {
        if (curr === void 0) {
          return prev;
        }
        if (prev === false || curr === false) {
          return false;
        } else if (prev === true) {
          return curr;
        } else if (curr === true) {
          return prev;
        } else if (Array.isArray(prev.allOf)) {
          if (Array.isArray(curr.allOf)) {
            return { ...prev, allOf: [...prev.allOf, ...curr.allOf] };
          } else {
            return { ...prev, allOf: [...prev.allOf, curr] };
          }
        } else if (Array.isArray(curr.allOf)) {
          return { ...prev, allOf: [prev, ...curr.allOf] };
        } else {
          return { ...prev, allOf: [prev, curr] };
        }
      }, true);
    }
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/json/schema/index.js
var require_schema2 = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/json/schema/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || /* @__PURE__ */ function() {
      var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transforms = void 0;
    var transforms = __importStar(require_transforms());
    exports2.transforms = transforms;
    __exportStar(require_interface(), exports2);
    __exportStar(require_pointer(), exports2);
    __exportStar(require_registry(), exports2);
    __exportStar(require_schema(), exports2);
    __exportStar(require_visitor(), exports2);
    __exportStar(require_utility(), exports2);
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/json/index.js
var require_json = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/json/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || /* @__PURE__ */ function() {
      var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.schema = void 0;
    var schema = __importStar(require_schema2());
    exports2.schema = schema;
    __exportStar(require_utils(), exports2);
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/logger/logger.js
var require_logger = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/logger/logger.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Logger = void 0;
    var rxjs_1 = require("rxjs");
    var Logger = class extends rxjs_1.Observable {
      name;
      parent;
      _subject = new rxjs_1.Subject();
      _metadata;
      _obs = rxjs_1.EMPTY;
      _subscription = null;
      get _observable() {
        return this._obs;
      }
      set _observable(v) {
        if (this._subscription) {
          this._subscription.unsubscribe();
        }
        this._obs = v;
        if (this.parent) {
          this._subscription = this.subscribe((value) => {
            if (this.parent) {
              this.parent._subject.next(value);
            }
          }, (error) => {
            if (this.parent) {
              this.parent._subject.error(error);
            }
          }, () => {
            if (this._subscription) {
              this._subscription.unsubscribe();
            }
            this._subscription = null;
          });
        }
      }
      constructor(name, parent = null) {
        super();
        this.name = name;
        this.parent = parent;
        const path = [];
        let p = parent;
        while (p) {
          path.push(p.name);
          p = p.parent;
        }
        this._metadata = { name, path };
        this._observable = this._subject.asObservable();
        if (this.parent && this.parent._subject) {
          this.parent._subject.subscribe(void 0, void 0, () => this.complete());
        }
      }
      asApi() {
        return {
          createChild: (name) => this.createChild(name),
          log: (level, message, metadata) => {
            return this.log(level, message, metadata);
          },
          debug: (message, metadata) => this.debug(message, metadata),
          info: (message, metadata) => this.info(message, metadata),
          warn: (message, metadata) => this.warn(message, metadata),
          error: (message, metadata) => this.error(message, metadata),
          fatal: (message, metadata) => this.fatal(message, metadata)
        };
      }
      createChild(name) {
        return new this.constructor(name, this);
      }
      complete() {
        this._subject.complete();
      }
      log(level, message, metadata = {}) {
        const entry = Object.assign({}, metadata, this._metadata, {
          level,
          message,
          timestamp: +Date.now()
        });
        this._subject.next(entry);
      }
      next(entry) {
        this._subject.next(entry);
      }
      debug(message, metadata = {}) {
        return this.log("debug", message, metadata);
      }
      info(message, metadata = {}) {
        return this.log("info", message, metadata);
      }
      warn(message, metadata = {}) {
        return this.log("warn", message, metadata);
      }
      error(message, metadata = {}) {
        return this.log("error", message, metadata);
      }
      fatal(message, metadata = {}) {
        return this.log("fatal", message, metadata);
      }
      toString() {
        return `<Logger(${this.name})>`;
      }
      lift(operator) {
        return this._observable.lift(operator);
      }
      subscribe(_observerOrNext, _error, _complete) {
        return this._observable.subscribe.apply(
          this._observable,
          // eslint-disable-next-line prefer-rest-params
          arguments
        );
      }
      forEach(next, promiseCtor = Promise) {
        return this._observable.forEach(next, promiseCtor);
      }
    };
    exports2.Logger = Logger;
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/logger/indent.js
var require_indent = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/logger/indent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IndentLogger = void 0;
    var rxjs_1 = require("rxjs");
    var logger_1 = require_logger();
    var indentationMap = {};
    var IndentLogger = class extends logger_1.Logger {
      constructor(name, parent = null, indentation = "  ") {
        super(name, parent);
        indentationMap[indentation] = indentationMap[indentation] || [""];
        const indentMap = indentationMap[indentation];
        this._observable = this._observable.pipe((0, rxjs_1.map)((entry) => {
          const l = entry.path.filter((x) => !!x).length;
          if (l >= indentMap.length) {
            let current = indentMap[indentMap.length - 1];
            while (l >= indentMap.length) {
              current += indentation;
              indentMap.push(current);
            }
          }
          entry.message = indentMap[l] + entry.message.split(/\n/).join("\n" + indentMap[l]);
          return entry;
        }));
      }
    };
    exports2.IndentLogger = IndentLogger;
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/logger/level.js
var require_level = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/logger/level.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LevelCapLogger = exports2.LevelTransformLogger = void 0;
    var logger_1 = require_logger();
    var LevelTransformLogger = class _LevelTransformLogger extends logger_1.Logger {
      name;
      parent;
      levelTransform;
      constructor(name, parent = null, levelTransform) {
        super(name, parent);
        this.name = name;
        this.parent = parent;
        this.levelTransform = levelTransform;
      }
      log(level, message, metadata = {}) {
        return super.log(this.levelTransform(level), message, metadata);
      }
      createChild(name) {
        return new _LevelTransformLogger(name, this, this.levelTransform);
      }
    };
    exports2.LevelTransformLogger = LevelTransformLogger;
    var LevelCapLogger = class _LevelCapLogger extends LevelTransformLogger {
      name;
      parent;
      levelCap;
      static levelMap = {
        debug: { debug: "debug", info: "debug", warn: "debug", error: "debug", fatal: "debug" },
        info: { debug: "debug", info: "info", warn: "info", error: "info", fatal: "info" },
        warn: { debug: "debug", info: "info", warn: "warn", error: "warn", fatal: "warn" },
        error: { debug: "debug", info: "info", warn: "warn", error: "error", fatal: "error" },
        fatal: { debug: "debug", info: "info", warn: "warn", error: "error", fatal: "fatal" }
      };
      constructor(name, parent = null, levelCap) {
        super(name, parent, (level) => {
          return _LevelCapLogger.levelMap[levelCap][level] || level;
        });
        this.name = name;
        this.parent = parent;
        this.levelCap = levelCap;
      }
    };
    exports2.LevelCapLogger = LevelCapLogger;
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/logger/null-logger.js
var require_null_logger = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/logger/null-logger.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NullLogger = void 0;
    var rxjs_1 = require("rxjs");
    var logger_1 = require_logger();
    var NullLogger = class _NullLogger extends logger_1.Logger {
      constructor(parent = null) {
        super("", parent);
        this._observable = rxjs_1.EMPTY;
      }
      asApi() {
        return {
          createChild: () => new _NullLogger(this),
          log() {
          },
          debug() {
          },
          info() {
          },
          warn() {
          },
          error() {
          },
          fatal() {
          }
        };
      }
    };
    exports2.NullLogger = NullLogger;
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/logger/transform-logger.js
var require_transform_logger = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/logger/transform-logger.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TransformLogger = void 0;
    var logger_1 = require_logger();
    var TransformLogger = class extends logger_1.Logger {
      constructor(name, transform, parent = null) {
        super(name, parent);
        this._observable = transform(this._observable);
      }
    };
    exports2.TransformLogger = TransformLogger;
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/logger/index.js
var require_logger2 = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/logger/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_indent(), exports2);
    __exportStar(require_level(), exports2);
    __exportStar(require_logger(), exports2);
    __exportStar(require_null_logger(), exports2);
    __exportStar(require_transform_logger(), exports2);
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/workspace/definitions.js
var require_definitions = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/workspace/definitions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TargetDefinitionCollection = exports2.ProjectDefinitionCollection = void 0;
    var DefinitionCollection = class {
      _listener;
      _map;
      constructor(initial, _listener) {
        this._listener = _listener;
        this._map = new Map(initial && Object.entries(initial));
      }
      delete(key) {
        const result = this._map.delete(key);
        if (result) {
          this._listener?.(key, void 0, this);
        }
        return result;
      }
      set(key, value) {
        const updatedValue = value !== this.get(key);
        if (updatedValue) {
          this._map.set(key, value);
          this._listener?.(key, value, this);
        }
        return this;
      }
      forEach(callbackfn, thisArg) {
        this._map.forEach((value, key) => callbackfn(value, key, this), thisArg);
      }
      get(key) {
        return this._map.get(key);
      }
      has(key) {
        return this._map.has(key);
      }
      get size() {
        return this._map.size;
      }
      [Symbol.iterator]() {
        return this._map[Symbol.iterator]();
      }
      entries() {
        return this._map.entries();
      }
      keys() {
        return this._map.keys();
      }
      values() {
        return this._map.values();
      }
    };
    function isJsonValue(value) {
      const visited = /* @__PURE__ */ new Set();
      switch (typeof value) {
        case "boolean":
        case "number":
        case "string":
          return true;
        case "object":
          if (value === null) {
            return true;
          }
          visited.add(value);
          for (const property of Object.values(value)) {
            if (typeof value === "object" && visited.has(property)) {
              continue;
            }
            if (!isJsonValue(property)) {
              return false;
            }
          }
          return true;
        default:
          return false;
      }
    }
    var ProjectDefinitionCollection = class extends DefinitionCollection {
      constructor(initial, listener) {
        super(initial, listener);
      }
      add(definition) {
        if (this.has(definition.name)) {
          throw new Error("Project name already exists.");
        }
        this._validateName(definition.name);
        const project = {
          root: definition.root,
          prefix: definition.prefix,
          sourceRoot: definition.sourceRoot,
          targets: new TargetDefinitionCollection(),
          extensions: {}
        };
        if (definition.targets) {
          for (const [name, target] of Object.entries(definition.targets)) {
            if (target) {
              project.targets.set(name, target);
            }
          }
        }
        for (const [name, value] of Object.entries(definition)) {
          switch (name) {
            case "name":
            case "root":
            case "sourceRoot":
            case "prefix":
            case "targets":
              break;
            default:
              if (isJsonValue(value)) {
                project.extensions[name] = value;
              } else {
                throw new TypeError(`"${name}" must be a JSON value.`);
              }
              break;
          }
        }
        super.set(definition.name, project);
        return project;
      }
      set(name, value) {
        this._validateName(name);
        super.set(name, value);
        return this;
      }
      _validateName(name) {
        if (typeof name !== "string" || !/^(?:@\w[\w.-]*\/)?\w[\w.-]*$/.test(name)) {
          throw new Error("Project name must be a valid npm package name.");
        }
      }
    };
    exports2.ProjectDefinitionCollection = ProjectDefinitionCollection;
    var TargetDefinitionCollection = class extends DefinitionCollection {
      constructor(initial, listener) {
        super(initial, listener);
      }
      add(definition) {
        if (this.has(definition.name)) {
          throw new Error("Target name already exists.");
        }
        this._validateName(definition.name);
        const target = {
          builder: definition.builder,
          options: definition.options,
          configurations: definition.configurations,
          defaultConfiguration: definition.defaultConfiguration
        };
        super.set(definition.name, target);
        return target;
      }
      set(name, value) {
        this._validateName(name);
        super.set(name, value);
        return this;
      }
      _validateName(name) {
        if (typeof name !== "string") {
          throw new TypeError("Target name must be a string.");
        }
      }
    };
    exports2.TargetDefinitionCollection = TargetDefinitionCollection;
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/path.js
var require_path = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/path.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.path = exports2.NormalizedRoot = exports2.NormalizedSep = exports2.PathCannotBeFragmentException = exports2.PathMustBeAbsoluteException = exports2.InvalidPathException = void 0;
    exports2.split = split;
    exports2.extname = extname;
    exports2.basename = basename;
    exports2.dirname = dirname;
    exports2.join = join2;
    exports2.isAbsolute = isAbsolute;
    exports2.relative = relative;
    exports2.resolve = resolve;
    exports2.fragment = fragment;
    exports2.resetNormalizeCache = resetNormalizeCache;
    exports2.normalize = normalize;
    exports2.noCacheNormalize = noCacheNormalize;
    exports2.asWindowsPath = asWindowsPath;
    exports2.asPosixPath = asPosixPath;
    exports2.getSystemPath = getSystemPath;
    var exception_1 = require_exception();
    var InvalidPathException = class extends exception_1.BaseException {
      constructor(path2) {
        super(`Path ${JSON.stringify(path2)} is invalid.`);
      }
    };
    exports2.InvalidPathException = InvalidPathException;
    var PathMustBeAbsoluteException = class extends exception_1.BaseException {
      constructor(path2) {
        super(`Path ${JSON.stringify(path2)} must be absolute.`);
      }
    };
    exports2.PathMustBeAbsoluteException = PathMustBeAbsoluteException;
    var PathCannotBeFragmentException = class extends exception_1.BaseException {
      constructor(path2) {
        super(`Path ${JSON.stringify(path2)} cannot be made a fragment.`);
      }
    };
    exports2.PathCannotBeFragmentException = PathCannotBeFragmentException;
    exports2.NormalizedSep = "/";
    exports2.NormalizedRoot = exports2.NormalizedSep;
    function split(path2) {
      const fragments = path2.split(exports2.NormalizedSep).map((x) => fragment(x));
      if (fragments[fragments.length - 1].length === 0) {
        fragments.pop();
      }
      return fragments;
    }
    function extname(path2) {
      const base = basename(path2);
      const i = base.lastIndexOf(".");
      if (i < 1) {
        return "";
      } else {
        return base.slice(i);
      }
    }
    function basename(path2) {
      const i = path2.lastIndexOf(exports2.NormalizedSep);
      if (i == -1) {
        return fragment(path2);
      } else {
        return fragment(path2.slice(path2.lastIndexOf(exports2.NormalizedSep) + 1));
      }
    }
    function dirname(path2) {
      const index = path2.lastIndexOf(exports2.NormalizedSep);
      if (index === -1) {
        return "";
      }
      const endIndex = index === 0 ? 1 : index;
      return normalize(path2.slice(0, endIndex));
    }
    function join2(p1, ...others) {
      if (others.length > 0) {
        return normalize((p1 ? p1 + exports2.NormalizedSep : "") + others.join(exports2.NormalizedSep));
      } else {
        return p1;
      }
    }
    function isAbsolute(p) {
      return p.startsWith(exports2.NormalizedSep);
    }
    function relative(from, to) {
      if (!isAbsolute(from)) {
        throw new PathMustBeAbsoluteException(from);
      }
      if (!isAbsolute(to)) {
        throw new PathMustBeAbsoluteException(to);
      }
      let p;
      if (from == to) {
        p = "";
      } else {
        const splitFrom = split(from);
        const splitTo = split(to);
        while (splitFrom.length > 0 && splitTo.length > 0 && splitFrom[0] == splitTo[0]) {
          splitFrom.shift();
          splitTo.shift();
        }
        if (splitFrom.length == 0) {
          p = splitTo.join(exports2.NormalizedSep);
        } else {
          p = splitFrom.map(() => "..").concat(splitTo).join(exports2.NormalizedSep);
        }
      }
      return normalize(p);
    }
    function resolve(p1, p2) {
      if (isAbsolute(p2)) {
        return p2;
      } else {
        return join2(p1, p2);
      }
    }
    function fragment(path2) {
      if (path2.indexOf(exports2.NormalizedSep) != -1) {
        throw new PathCannotBeFragmentException(path2);
      }
      return path2;
    }
    var normalizedCache = /* @__PURE__ */ new Map();
    function resetNormalizeCache() {
      normalizedCache = /* @__PURE__ */ new Map();
    }
    function normalize(path2) {
      let maybePath = normalizedCache.get(path2);
      if (!maybePath) {
        maybePath = noCacheNormalize(path2);
        normalizedCache.set(path2, maybePath);
      }
      return maybePath;
    }
    function noCacheNormalize(path2) {
      if (path2 == "" || path2 == ".") {
        return "";
      } else if (path2 == exports2.NormalizedRoot) {
        return exports2.NormalizedRoot;
      }
      const original = path2;
      if (path2.match(/^[A-Z]:[/\\]/i)) {
        path2 = "\\" + path2[0].toUpperCase() + "\\" + path2.slice(3);
      }
      const p = path2.split(/[/\\]/g);
      let relative2 = false;
      let i = 1;
      if (p[0] != "") {
        p.unshift(".");
        relative2 = true;
      }
      while (i < p.length) {
        if (p[i] == ".") {
          p.splice(i, 1);
        } else if (p[i] == "..") {
          if (i < 2 && !relative2) {
            throw new InvalidPathException(original);
          } else if (i >= 2 && p[i - 1] != "..") {
            p.splice(i - 1, 2);
            i--;
          } else {
            i++;
          }
        } else if (p[i] == "") {
          p.splice(i, 1);
        } else {
          i++;
        }
      }
      if (p.length == 1) {
        return p[0] == "" ? exports2.NormalizedSep : "";
      } else {
        if (p[0] == ".") {
          p.shift();
        }
        return p.join(exports2.NormalizedSep);
      }
    }
    var path = (strings3, ...values) => {
      return normalize(String.raw(strings3, ...values));
    };
    exports2.path = path;
    function asWindowsPath(path2) {
      const drive = path2.match(/^\/(\w)(?:\/(.*))?$/);
      if (drive) {
        const subPath = drive[2] ? drive[2].replace(/\//g, "\\") : "";
        return `${drive[1]}:\\${subPath}`;
      }
      return path2.replace(/\//g, "\\");
    }
    function asPosixPath(path2) {
      return path2;
    }
    function getSystemPath(path2) {
      if (process.platform.startsWith("win32")) {
        return asWindowsPath(path2);
      } else {
        return asPosixPath(path2);
      }
    }
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/host/buffer.js
var require_buffer = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/host/buffer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stringToFileBuffer = stringToFileBuffer;
    exports2.fileBufferToString = fileBufferToString;
    var node_util_1 = require("node:util");
    function stringToFileBuffer(str) {
      return new node_util_1.TextEncoder().encode(str).buffer;
    }
    function fileBufferToString(fileBuffer) {
      if (fileBuffer.toString.length === 1) {
        return fileBuffer.toString("utf-8");
      }
      return new node_util_1.TextDecoder("utf-8").decode(new Uint8Array(fileBuffer));
    }
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/host/interface.js
var require_interface2 = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/host/interface.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HostWatchEventType = void 0;
    var HostWatchEventType;
    (function(HostWatchEventType2) {
      HostWatchEventType2[HostWatchEventType2["Changed"] = 0] = "Changed";
      HostWatchEventType2[HostWatchEventType2["Created"] = 1] = "Created";
      HostWatchEventType2[HostWatchEventType2["Deleted"] = 2] = "Deleted";
      HostWatchEventType2[HostWatchEventType2["Renamed"] = 3] = "Renamed";
    })(HostWatchEventType || (exports2.HostWatchEventType = HostWatchEventType = {}));
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/host/memory.js
var require_memory = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/host/memory.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SimpleMemoryHost = void 0;
    var rxjs_1 = require("rxjs");
    var exception_1 = require_exception();
    var path_1 = require_path();
    var interface_1 = require_interface2();
    var SimpleMemoryHost = class {
      _cache = /* @__PURE__ */ new Map();
      _watchers = /* @__PURE__ */ new Map();
      _newDirStats() {
        return {
          inspect() {
            return "<Directory>";
          },
          isFile() {
            return false;
          },
          isDirectory() {
            return true;
          },
          size: 0,
          atime: /* @__PURE__ */ new Date(),
          ctime: /* @__PURE__ */ new Date(),
          mtime: /* @__PURE__ */ new Date(),
          birthtime: /* @__PURE__ */ new Date(),
          content: null
        };
      }
      _newFileStats(content, oldStats) {
        return {
          inspect() {
            return `<File size(${content.byteLength})>`;
          },
          isFile() {
            return true;
          },
          isDirectory() {
            return false;
          },
          size: content.byteLength,
          atime: oldStats ? oldStats.atime : /* @__PURE__ */ new Date(),
          ctime: /* @__PURE__ */ new Date(),
          mtime: /* @__PURE__ */ new Date(),
          birthtime: oldStats ? oldStats.birthtime : /* @__PURE__ */ new Date(),
          content
        };
      }
      constructor() {
        this._cache.set((0, path_1.normalize)("/"), this._newDirStats());
      }
      _toAbsolute(path) {
        return (0, path_1.isAbsolute)(path) ? path : (0, path_1.normalize)("/" + path);
      }
      _updateWatchers(path, type) {
        const time = /* @__PURE__ */ new Date();
        let currentPath = path;
        let parent = null;
        if (this._watchers.size == 0) {
          return;
        }
        const maybeWatcher = this._watchers.get(currentPath);
        if (maybeWatcher) {
          maybeWatcher.forEach((watcher) => {
            const [options, subject] = watcher;
            subject.next({ path, time, type });
            if (!options.persistent && type == interface_1.HostWatchEventType.Deleted) {
              subject.complete();
              this._watchers.delete(currentPath);
            }
          });
        }
        do {
          currentPath = parent !== null ? parent : currentPath;
          parent = (0, path_1.dirname)(currentPath);
          const maybeWatcher2 = this._watchers.get(currentPath);
          if (maybeWatcher2) {
            maybeWatcher2.forEach((watcher) => {
              const [options, subject] = watcher;
              if (!options.recursive) {
                return;
              }
              subject.next({ path, time, type });
              if (!options.persistent && type == interface_1.HostWatchEventType.Deleted) {
                subject.complete();
                this._watchers.delete(currentPath);
              }
            });
          }
        } while (parent != currentPath);
      }
      get capabilities() {
        return { synchronous: true };
      }
      /**
       * List of protected methods that give direct access outside the observables to the cache
       * and internal states.
       */
      _write(path, content) {
        path = this._toAbsolute(path);
        const old = this._cache.get(path);
        if (old && old.isDirectory()) {
          throw new exception_1.PathIsDirectoryException(path);
        }
        const fragments = (0, path_1.split)(path);
        let curr = (0, path_1.normalize)("/");
        for (const fr of fragments) {
          curr = (0, path_1.join)(curr, fr);
          const maybeStats = this._cache.get(fr);
          if (maybeStats) {
            if (maybeStats.isFile()) {
              throw new exception_1.PathIsFileException(curr);
            }
          } else {
            this._cache.set(curr, this._newDirStats());
          }
        }
        const stats = this._newFileStats(content, old);
        this._cache.set(path, stats);
        this._updateWatchers(path, old ? interface_1.HostWatchEventType.Changed : interface_1.HostWatchEventType.Created);
      }
      _read(path) {
        path = this._toAbsolute(path);
        const maybeStats = this._cache.get(path);
        if (!maybeStats) {
          throw new exception_1.FileDoesNotExistException(path);
        } else if (maybeStats.isDirectory()) {
          throw new exception_1.PathIsDirectoryException(path);
        } else if (!maybeStats.content) {
          throw new exception_1.PathIsDirectoryException(path);
        } else {
          return maybeStats.content;
        }
      }
      _delete(path) {
        path = this._toAbsolute(path);
        if (this._isDirectory(path)) {
          for (const [cachePath] of this._cache.entries()) {
            if (cachePath.startsWith(path + path_1.NormalizedSep) || cachePath === path) {
              this._cache.delete(cachePath);
            }
          }
        } else {
          this._cache.delete(path);
        }
        this._updateWatchers(path, interface_1.HostWatchEventType.Deleted);
      }
      _rename(from, to) {
        from = this._toAbsolute(from);
        to = this._toAbsolute(to);
        if (!this._cache.has(from)) {
          throw new exception_1.FileDoesNotExistException(from);
        } else if (this._cache.has(to)) {
          throw new exception_1.FileAlreadyExistException(to);
        }
        if (this._isDirectory(from)) {
          for (const path of this._cache.keys()) {
            if (path.startsWith(from + path_1.NormalizedSep)) {
              const content = this._cache.get(path);
              if (content) {
                this._cache.set((0, path_1.join)(to, path_1.NormalizedSep, path.slice(from.length)), content);
              }
            }
          }
        } else {
          const content = this._cache.get(from);
          if (content) {
            const fragments = (0, path_1.split)(to);
            const newDirectories = [];
            let curr = (0, path_1.normalize)("/");
            for (const fr of fragments) {
              curr = (0, path_1.join)(curr, fr);
              const maybeStats = this._cache.get(fr);
              if (maybeStats) {
                if (maybeStats.isFile()) {
                  throw new exception_1.PathIsFileException(curr);
                }
              } else {
                newDirectories.push(curr);
              }
            }
            for (const newDirectory of newDirectories) {
              this._cache.set(newDirectory, this._newDirStats());
            }
            this._cache.delete(from);
            this._cache.set(to, content);
          }
        }
        this._updateWatchers(from, interface_1.HostWatchEventType.Renamed);
      }
      _list(path) {
        path = this._toAbsolute(path);
        if (this._isFile(path)) {
          throw new exception_1.PathIsFileException(path);
        }
        const fragments = (0, path_1.split)(path);
        const result = /* @__PURE__ */ new Set();
        if (path !== path_1.NormalizedRoot) {
          for (const p of this._cache.keys()) {
            if (p.startsWith(path + path_1.NormalizedSep)) {
              result.add((0, path_1.split)(p)[fragments.length]);
            }
          }
        } else {
          for (const p of this._cache.keys()) {
            if (p.startsWith(path_1.NormalizedSep) && p !== path_1.NormalizedRoot) {
              result.add((0, path_1.split)(p)[1]);
            }
          }
        }
        return [...result];
      }
      _exists(path) {
        return !!this._cache.get(this._toAbsolute(path));
      }
      _isDirectory(path) {
        const maybeStats = this._cache.get(this._toAbsolute(path));
        return maybeStats ? maybeStats.isDirectory() : false;
      }
      _isFile(path) {
        const maybeStats = this._cache.get(this._toAbsolute(path));
        return maybeStats ? maybeStats.isFile() : false;
      }
      _stat(path) {
        const maybeStats = this._cache.get(this._toAbsolute(path));
        if (!maybeStats) {
          return null;
        } else {
          return maybeStats;
        }
      }
      _watch(path, options) {
        path = this._toAbsolute(path);
        const subject = new rxjs_1.Subject();
        let maybeWatcherArray = this._watchers.get(path);
        if (!maybeWatcherArray) {
          maybeWatcherArray = [];
          this._watchers.set(path, maybeWatcherArray);
        }
        maybeWatcherArray.push([options || {}, subject]);
        return subject.asObservable();
      }
      write(path, content) {
        return new rxjs_1.Observable((obs) => {
          this._write(path, content);
          obs.next();
          obs.complete();
        });
      }
      read(path) {
        return new rxjs_1.Observable((obs) => {
          const content = this._read(path);
          obs.next(content);
          obs.complete();
        });
      }
      delete(path) {
        return new rxjs_1.Observable((obs) => {
          this._delete(path);
          obs.next();
          obs.complete();
        });
      }
      rename(from, to) {
        return new rxjs_1.Observable((obs) => {
          this._rename(from, to);
          obs.next();
          obs.complete();
        });
      }
      list(path) {
        return new rxjs_1.Observable((obs) => {
          obs.next(this._list(path));
          obs.complete();
        });
      }
      exists(path) {
        return new rxjs_1.Observable((obs) => {
          obs.next(this._exists(path));
          obs.complete();
        });
      }
      isDirectory(path) {
        return new rxjs_1.Observable((obs) => {
          obs.next(this._isDirectory(path));
          obs.complete();
        });
      }
      isFile(path) {
        return new rxjs_1.Observable((obs) => {
          obs.next(this._isFile(path));
          obs.complete();
        });
      }
      // Some hosts may not support stat.
      stat(path) {
        return new rxjs_1.Observable((obs) => {
          obs.next(this._stat(path));
          obs.complete();
        });
      }
      watch(path, options) {
        return this._watch(path, options);
      }
      reset() {
        this._cache.clear();
        this._watchers.clear();
      }
    };
    exports2.SimpleMemoryHost = SimpleMemoryHost;
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/host/sync.js
var require_sync = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/host/sync.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SyncDelegateHost = exports2.SynchronousDelegateExpectedException = void 0;
    var exception_1 = require_exception();
    var SynchronousDelegateExpectedException = class extends exception_1.BaseException {
      constructor() {
        super(`Expected a synchronous delegate but got an asynchronous one.`);
      }
    };
    exports2.SynchronousDelegateExpectedException = SynchronousDelegateExpectedException;
    var SyncDelegateHost = class {
      _delegate;
      constructor(_delegate) {
        this._delegate = _delegate;
        if (!_delegate.capabilities.synchronous) {
          throw new SynchronousDelegateExpectedException();
        }
      }
      _doSyncCall(observable) {
        let completed = false;
        let result = void 0;
        let errorResult = void 0;
        observable.subscribe((x) => result = x, (err) => errorResult = err, () => completed = true);
        if (errorResult !== void 0) {
          throw errorResult;
        }
        if (!completed) {
          throw new SynchronousDelegateExpectedException();
        }
        return result;
      }
      get capabilities() {
        return this._delegate.capabilities;
      }
      get delegate() {
        return this._delegate;
      }
      write(path, content) {
        return this._doSyncCall(this._delegate.write(path, content));
      }
      read(path) {
        return this._doSyncCall(this._delegate.read(path));
      }
      delete(path) {
        return this._doSyncCall(this._delegate.delete(path));
      }
      rename(from, to) {
        return this._doSyncCall(this._delegate.rename(from, to));
      }
      list(path) {
        return this._doSyncCall(this._delegate.list(path));
      }
      exists(path) {
        return this._doSyncCall(this._delegate.exists(path));
      }
      isDirectory(path) {
        return this._doSyncCall(this._delegate.isDirectory(path));
      }
      isFile(path) {
        return this._doSyncCall(this._delegate.isFile(path));
      }
      // Some hosts may not support stat.
      stat(path) {
        const result = this._delegate.stat(path);
        if (result) {
          return this._doSyncCall(result);
        } else {
          return null;
        }
      }
      watch(path, options) {
        return this._delegate.watch(path, options);
      }
    };
    exports2.SyncDelegateHost = SyncDelegateHost;
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/host/test.js
var require_test = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/host/test.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TestHost = void 0;
    var path_1 = require_path();
    var buffer_1 = require_buffer();
    var memory_1 = require_memory();
    var sync_1 = require_sync();
    var TestHost = class _TestHost extends memory_1.SimpleMemoryHost {
      _records = [];
      _sync = null;
      constructor(map = {}) {
        super();
        for (const filePath of Object.getOwnPropertyNames(map)) {
          this._write((0, path_1.normalize)(filePath), (0, buffer_1.stringToFileBuffer)(map[filePath]));
        }
      }
      get records() {
        return [...this._records];
      }
      clearRecords() {
        this._records = [];
      }
      get files() {
        const sync = this.sync;
        function _visit(p) {
          return sync.list(p).map((fragment) => (0, path_1.join)(p, fragment)).reduce((files, path) => {
            if (sync.isDirectory(path)) {
              return files.concat(_visit(path));
            } else {
              return files.concat(path);
            }
          }, []);
        }
        return _visit((0, path_1.normalize)("/"));
      }
      get sync() {
        if (!this._sync) {
          this._sync = new sync_1.SyncDelegateHost(this);
        }
        return this._sync;
      }
      clone() {
        const newHost = new _TestHost();
        newHost._cache = new Map(this._cache);
        return newHost;
      }
      // Override parents functions to keep a record of all operators that were done.
      _write(path, content) {
        this._records.push({ kind: "write", path });
        return super._write(path, content);
      }
      _read(path) {
        this._records.push({ kind: "read", path });
        return super._read(path);
      }
      _delete(path) {
        this._records.push({ kind: "delete", path });
        return super._delete(path);
      }
      _rename(from, to) {
        this._records.push({ kind: "rename", from, to });
        return super._rename(from, to);
      }
      _list(path) {
        this._records.push({ kind: "list", path });
        return super._list(path);
      }
      _exists(path) {
        this._records.push({ kind: "exists", path });
        return super._exists(path);
      }
      _isDirectory(path) {
        this._records.push({ kind: "isDirectory", path });
        return super._isDirectory(path);
      }
      _isFile(path) {
        this._records.push({ kind: "isFile", path });
        return super._isFile(path);
      }
      _stat(path) {
        this._records.push({ kind: "stat", path });
        return super._stat(path);
      }
      _watch(path, options) {
        this._records.push({ kind: "watch", path });
        return super._watch(path, options);
      }
      $write(path, content) {
        return super._write((0, path_1.normalize)(path), (0, buffer_1.stringToFileBuffer)(content));
      }
      $read(path) {
        return (0, buffer_1.fileBufferToString)(super._read((0, path_1.normalize)(path)));
      }
      $list(path) {
        return super._list((0, path_1.normalize)(path));
      }
      $exists(path) {
        return super._exists((0, path_1.normalize)(path));
      }
      $isDirectory(path) {
        return super._isDirectory((0, path_1.normalize)(path));
      }
      $isFile(path) {
        return super._isFile((0, path_1.normalize)(path));
      }
    };
    exports2.TestHost = TestHost;
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/host/resolver.js
var require_resolver = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/host/resolver.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ResolverHost = void 0;
    var ResolverHost = class {
      _delegate;
      constructor(_delegate) {
        this._delegate = _delegate;
      }
      get capabilities() {
        return this._delegate.capabilities;
      }
      write(path, content) {
        return this._delegate.write(this._resolve(path), content);
      }
      read(path) {
        return this._delegate.read(this._resolve(path));
      }
      delete(path) {
        return this._delegate.delete(this._resolve(path));
      }
      rename(from, to) {
        return this._delegate.rename(this._resolve(from), this._resolve(to));
      }
      list(path) {
        return this._delegate.list(this._resolve(path));
      }
      exists(path) {
        return this._delegate.exists(this._resolve(path));
      }
      isDirectory(path) {
        return this._delegate.isDirectory(this._resolve(path));
      }
      isFile(path) {
        return this._delegate.isFile(this._resolve(path));
      }
      // Some hosts may not support stat.
      stat(path) {
        return this._delegate.stat(this._resolve(path));
      }
      // Some hosts may not support watching.
      watch(path, options) {
        return this._delegate.watch(this._resolve(path), options);
      }
    };
    exports2.ResolverHost = ResolverHost;
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/host/alias.js
var require_alias = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/host/alias.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AliasHost = void 0;
    var path_1 = require_path();
    var resolver_1 = require_resolver();
    var AliasHost = class extends resolver_1.ResolverHost {
      _aliases = /* @__PURE__ */ new Map();
      _resolve(path) {
        let maybeAlias = this._aliases.get(path);
        const sp = (0, path_1.split)(path);
        const remaining = [];
        while (!maybeAlias && sp.length > 0) {
          const p = (0, path_1.join)(path_1.NormalizedRoot, ...sp);
          maybeAlias = this._aliases.get(p);
          if (maybeAlias) {
            maybeAlias = (0, path_1.join)(maybeAlias, ...remaining);
          }
          remaining.unshift(sp.pop());
        }
        return maybeAlias || path;
      }
      get aliases() {
        return this._aliases;
      }
    };
    exports2.AliasHost = AliasHost;
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/host/create.js
var require_create = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/host/create.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createSyncHost = createSyncHost;
    var rxjs_1 = require("rxjs");
    function wrapAction(action) {
      return new rxjs_1.Observable((subscriber) => {
        subscriber.next(action());
        subscriber.complete();
      });
    }
    function createSyncHost(handler) {
      return new class {
        get capabilities() {
          return { synchronous: true };
        }
        read(path) {
          return wrapAction(() => handler.read(path));
        }
        list(path) {
          return wrapAction(() => handler.list(path));
        }
        exists(path) {
          return wrapAction(() => handler.exists(path));
        }
        isDirectory(path) {
          return wrapAction(() => handler.isDirectory(path));
        }
        isFile(path) {
          return wrapAction(() => handler.isFile(path));
        }
        stat(path) {
          return wrapAction(() => handler.stat(path));
        }
        write(path, content) {
          return wrapAction(() => handler.write(path, content));
        }
        delete(path) {
          return wrapAction(() => handler.delete(path));
        }
        rename(from, to) {
          return wrapAction(() => handler.rename(from, to));
        }
        watch() {
          return null;
        }
      }();
    }
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/host/empty.js
var require_empty = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/host/empty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Empty = void 0;
    var rxjs_1 = require("rxjs");
    var exception_1 = require_exception();
    var Empty = class {
      capabilities = {
        synchronous: true
      };
      read(path) {
        return (0, rxjs_1.throwError)(new exception_1.FileDoesNotExistException(path));
      }
      list(path) {
        return (0, rxjs_1.of)([]);
      }
      exists(path) {
        return (0, rxjs_1.of)(false);
      }
      isDirectory(path) {
        return (0, rxjs_1.of)(false);
      }
      isFile(path) {
        return (0, rxjs_1.of)(false);
      }
      stat(path) {
        return (0, rxjs_1.of)(null);
      }
    };
    exports2.Empty = Empty;
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/host/pattern.js
var require_pattern = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/host/pattern.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PatternMatchingHost = void 0;
    var picomatch_1 = require("picomatch");
    var resolver_1 = require_resolver();
    var PatternMatchingHost = class extends resolver_1.ResolverHost {
      _patterns = /* @__PURE__ */ new Map();
      addPattern(pattern, replacementFn) {
        const patterns = Array.isArray(pattern) ? pattern : [pattern];
        for (const glob of patterns) {
          const { output } = (0, picomatch_1.parse)(glob);
          this._patterns.set(new RegExp(`^${output}$`), replacementFn);
        }
      }
      _resolve(path) {
        let newPath = path;
        this._patterns.forEach((fn, re) => {
          if (re.test(path)) {
            newPath = fn(newPath);
          }
        });
        return newPath;
      }
    };
    exports2.PatternMatchingHost = PatternMatchingHost;
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/host/record.js
var require_record = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/host/record.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CordHost = void 0;
    var rxjs_1 = require("rxjs");
    var exception_1 = require_exception();
    var memory_1 = require_memory();
    var CordHost = class _CordHost extends memory_1.SimpleMemoryHost {
      _back;
      _filesToCreate = /* @__PURE__ */ new Set();
      _filesToRename = /* @__PURE__ */ new Map();
      _filesToRenameRevert = /* @__PURE__ */ new Map();
      _filesToDelete = /* @__PURE__ */ new Set();
      _filesToOverwrite = /* @__PURE__ */ new Set();
      constructor(_back) {
        super();
        this._back = _back;
      }
      get backend() {
        return this._back;
      }
      get capabilities() {
        return {
          synchronous: this._back.capabilities.synchronous
        };
      }
      /**
       * Create a copy of this host, including all actions made.
       * @returns {CordHost} The carbon copy.
       */
      clone() {
        const dolly = new _CordHost(this._back);
        dolly._cache = new Map(this._cache);
        dolly._filesToCreate = new Set(this._filesToCreate);
        dolly._filesToRename = new Map(this._filesToRename);
        dolly._filesToRenameRevert = new Map(this._filesToRenameRevert);
        dolly._filesToDelete = new Set(this._filesToDelete);
        dolly._filesToOverwrite = new Set(this._filesToOverwrite);
        return dolly;
      }
      /**
       * Commit the changes recorded to a Host. It is assumed that the host does have the same structure
       * as the host that was used for backend (could be the same host).
       * @param host The host to create/delete/rename/overwrite files to.
       * @param force Whether to skip existence checks when creating/overwriting. This is
       *   faster but might lead to incorrect states. Because Hosts natively don't support creation
       *   versus overwriting (it's only writing), we check for existence before completing a request.
       * @returns An observable that completes when done, or error if an error occured.
       */
      commit(host, force = false) {
        return (0, rxjs_1.from)(this.records()).pipe((0, rxjs_1.concatMap)((record) => {
          switch (record.kind) {
            case "delete":
              return host.delete(record.path);
            case "rename":
              return host.rename(record.from, record.to);
            case "create":
              return host.exists(record.path).pipe((0, rxjs_1.switchMap)((exists) => {
                if (exists && !force) {
                  return (0, rxjs_1.throwError)(new exception_1.FileAlreadyExistException(record.path));
                } else {
                  return host.write(record.path, record.content);
                }
              }));
            case "overwrite":
              return host.exists(record.path).pipe((0, rxjs_1.switchMap)((exists) => {
                if (!exists && !force) {
                  return (0, rxjs_1.throwError)(new exception_1.FileDoesNotExistException(record.path));
                } else {
                  return host.write(record.path, record.content);
                }
              }));
          }
        }), (0, rxjs_1.reduce)(() => {
        }));
      }
      records() {
        return [
          ...[...this._filesToDelete.values()].map((path) => ({
            kind: "delete",
            path
          })),
          ...[...this._filesToRename.entries()].map(([from, to]) => ({
            kind: "rename",
            from,
            to
          })),
          ...[...this._filesToCreate.values()].map((path) => ({
            kind: "create",
            path,
            content: this._read(path)
          })),
          ...[...this._filesToOverwrite.values()].map((path) => ({
            kind: "overwrite",
            path,
            content: this._read(path)
          }))
        ];
      }
      /**
       * Specialized version of {@link CordHost#write} which forces the creation of a file whether it
       * exists or not.
       * @param {} path
       * @param {FileBuffer} content
       * @returns {Observable<void>}
       */
      create(path, content) {
        if (super._exists(path)) {
          throw new exception_1.FileAlreadyExistException(path);
        }
        if (this._filesToDelete.has(path)) {
          this._filesToDelete.delete(path);
          this._filesToOverwrite.add(path);
        } else {
          this._filesToCreate.add(path);
        }
        return super.write(path, content);
      }
      overwrite(path, content) {
        return this.isDirectory(path).pipe((0, rxjs_1.switchMap)((isDir) => {
          if (isDir) {
            return (0, rxjs_1.throwError)(new exception_1.PathIsDirectoryException(path));
          }
          return this.exists(path);
        }), (0, rxjs_1.switchMap)((exists) => {
          if (!exists) {
            return (0, rxjs_1.throwError)(new exception_1.FileDoesNotExistException(path));
          }
          if (!this._filesToCreate.has(path)) {
            this._filesToOverwrite.add(path);
          }
          return super.write(path, content);
        }));
      }
      write(path, content) {
        return this.exists(path).pipe((0, rxjs_1.switchMap)((exists) => {
          if (exists) {
            if (this.willRename(path) || this.willDelete(path)) {
              return this.create(path, content);
            } else {
              return this.overwrite(path, content);
            }
          } else {
            return this.create(path, content);
          }
        }));
      }
      read(path) {
        if (this._exists(path)) {
          return super.read(path);
        }
        return this._back.read(path);
      }
      delete(path) {
        if (this._exists(path)) {
          if (this._filesToCreate.has(path)) {
            this._filesToCreate.delete(path);
          } else if (this._filesToOverwrite.has(path)) {
            this._filesToOverwrite.delete(path);
            this._filesToDelete.add(path);
          } else {
            const maybeOrigin = this._filesToRenameRevert.get(path);
            if (maybeOrigin) {
              this._filesToRenameRevert.delete(path);
              this._filesToRename.delete(maybeOrigin);
              this._filesToDelete.add(maybeOrigin);
            } else {
              return (0, rxjs_1.throwError)(new exception_1.UnknownException(`This should never happen. Path: ${JSON.stringify(path)}.`));
            }
          }
          return super.delete(path);
        } else {
          return this._back.exists(path).pipe((0, rxjs_1.switchMap)((exists) => {
            if (exists) {
              this._filesToDelete.add(path);
              return (0, rxjs_1.of)();
            } else {
              return (0, rxjs_1.throwError)(new exception_1.FileDoesNotExistException(path));
            }
          }));
        }
      }
      rename(from, to) {
        return (0, rxjs_1.concat)(this.exists(to), this.exists(from)).pipe((0, rxjs_1.toArray)(), (0, rxjs_1.switchMap)(([existTo, existFrom]) => {
          if (!existFrom) {
            return (0, rxjs_1.throwError)(new exception_1.FileDoesNotExistException(from));
          }
          if (from === to) {
            return rxjs_1.EMPTY;
          }
          if (existTo) {
            return (0, rxjs_1.throwError)(new exception_1.FileAlreadyExistException(to));
          }
          if (this._filesToCreate.has(from)) {
            this._filesToCreate.delete(from);
            this._filesToCreate.add(to);
            return super.rename(from, to);
          }
          if (this._filesToOverwrite.has(from)) {
            this._filesToOverwrite.delete(from);
            return (0, rxjs_1.concat)(this.rename(from, to), new rxjs_1.Observable((x) => {
              this._filesToOverwrite.add(to);
              x.complete();
            }));
          }
          if (this._filesToDelete.has(to)) {
            this._filesToDelete.delete(to);
            this._filesToDelete.add(from);
            this._filesToOverwrite.add(to);
            return this.read(from).pipe((0, rxjs_1.map)((content) => this._write(to, content)));
          }
          const maybeTo1 = this._filesToRenameRevert.get(from);
          if (maybeTo1) {
            this._filesToRename.delete(maybeTo1);
            this._filesToRenameRevert.delete(from);
            from = maybeTo1;
          }
          this._filesToRename.set(from, to);
          this._filesToRenameRevert.set(to, from);
          if (this._exists(from)) {
            return super.rename(from, to);
          } else {
            return this._back.read(from).pipe((0, rxjs_1.switchMap)((content) => super.write(to, content)));
          }
        }));
      }
      list(path) {
        return (0, rxjs_1.concat)(super.list(path), this._back.list(path)).pipe((0, rxjs_1.reduce)((list, curr) => {
          curr.forEach((elem) => list.add(elem));
          return list;
        }, /* @__PURE__ */ new Set()), (0, rxjs_1.map)((set) => [...set]));
      }
      exists(path) {
        return this._exists(path) ? (0, rxjs_1.of)(true) : this.willDelete(path) || this.willRename(path) ? (0, rxjs_1.of)(false) : this._back.exists(path);
      }
      isDirectory(path) {
        return this._exists(path) ? super.isDirectory(path) : this._back.isDirectory(path);
      }
      isFile(path) {
        return this._exists(path) ? super.isFile(path) : this.willDelete(path) || this.willRename(path) ? (0, rxjs_1.of)(false) : this._back.isFile(path);
      }
      stat(path) {
        return this._exists(path) ? super.stat(path) : this.willDelete(path) || this.willRename(path) ? (0, rxjs_1.of)(null) : this._back.stat(path);
      }
      watch(path, options) {
        return null;
      }
      willCreate(path) {
        return this._filesToCreate.has(path);
      }
      willOverwrite(path) {
        return this._filesToOverwrite.has(path);
      }
      willDelete(path) {
        return this._filesToDelete.has(path);
      }
      willRename(path) {
        return this._filesToRename.has(path);
      }
      willRenameTo(path, to) {
        return this._filesToRename.get(path) === to;
      }
    };
    exports2.CordHost = CordHost;
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/host/safe.js
var require_safe = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/host/safe.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SafeReadonlyHost = void 0;
    var rxjs_1 = require("rxjs");
    var SafeReadonlyHost = class {
      _delegate;
      constructor(_delegate) {
        this._delegate = _delegate;
      }
      get capabilities() {
        return this._delegate.capabilities;
      }
      read(path) {
        return this._delegate.read(path);
      }
      list(path) {
        return this._delegate.list(path).pipe((0, rxjs_1.catchError)(() => (0, rxjs_1.of)([])));
      }
      exists(path) {
        return this._delegate.exists(path);
      }
      isDirectory(path) {
        return this._delegate.isDirectory(path).pipe((0, rxjs_1.catchError)(() => (0, rxjs_1.of)(false)));
      }
      isFile(path) {
        return this._delegate.isFile(path).pipe((0, rxjs_1.catchError)(() => (0, rxjs_1.of)(false)));
      }
      // Some hosts may not support stats.
      stat(path) {
        const maybeStat = this._delegate.stat(path);
        return maybeStat && maybeStat.pipe((0, rxjs_1.catchError)(() => (0, rxjs_1.of)(null)));
      }
    };
    exports2.SafeReadonlyHost = SafeReadonlyHost;
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/host/scoped.js
var require_scoped = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/host/scoped.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ScopedHost = void 0;
    var path_1 = require_path();
    var resolver_1 = require_resolver();
    var ScopedHost = class extends resolver_1.ResolverHost {
      _root;
      constructor(delegate, _root = path_1.NormalizedRoot) {
        super(delegate);
        this._root = _root;
      }
      _resolve(path) {
        return (0, path_1.join)(this._root, path);
      }
    };
    exports2.ScopedHost = ScopedHost;
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/host/index.js
var require_host = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/host/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || /* @__PURE__ */ function() {
      var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.test = void 0;
    var test = __importStar(require_test());
    exports2.test = test;
    __exportStar(require_alias(), exports2);
    __exportStar(require_buffer(), exports2);
    __exportStar(require_create(), exports2);
    __exportStar(require_empty(), exports2);
    __exportStar(require_interface2(), exports2);
    __exportStar(require_memory(), exports2);
    __exportStar(require_pattern(), exports2);
    __exportStar(require_record(), exports2);
    __exportStar(require_safe(), exports2);
    __exportStar(require_scoped(), exports2);
    __exportStar(require_sync(), exports2);
    __exportStar(require_resolver(), exports2);
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/index.js
var require_virtual_fs = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/virtual-fs/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || /* @__PURE__ */ function() {
      var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.virtualFs = void 0;
    var virtualFs = __importStar(require_host());
    exports2.virtualFs = virtualFs;
    __exportStar(require_path(), exports2);
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/workspace/host.js
var require_host2 = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/workspace/host.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createWorkspaceHost = createWorkspaceHost;
    var rxjs_1 = require("rxjs");
    var virtual_fs_1 = require_virtual_fs();
    function createWorkspaceHost(host) {
      const workspaceHost = {
        async readFile(path) {
          const data = await (0, rxjs_1.lastValueFrom)(host.read((0, virtual_fs_1.normalize)(path)));
          return virtual_fs_1.virtualFs.fileBufferToString(data);
        },
        async writeFile(path, data) {
          return (0, rxjs_1.lastValueFrom)(host.write((0, virtual_fs_1.normalize)(path), virtual_fs_1.virtualFs.stringToFileBuffer(data)));
        },
        async isDirectory(path) {
          try {
            return await (0, rxjs_1.lastValueFrom)(host.isDirectory((0, virtual_fs_1.normalize)(path)));
          } catch {
            return false;
          }
        },
        async isFile(path) {
          try {
            return await (0, rxjs_1.lastValueFrom)(host.isFile((0, virtual_fs_1.normalize)(path)));
          } catch {
            return false;
          }
        }
      };
      return workspaceHost;
    }
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/workspace/json/metadata.js
var require_metadata = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/workspace/json/metadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.JsonWorkspaceMetadata = exports2.JsonWorkspaceSymbol = void 0;
    var jsonc_parser_1 = require("jsonc-parser");
    exports2.JsonWorkspaceSymbol = Symbol.for("@angular/core:workspace-json");
    function escapeKey(key) {
      return key.replace("~", "~0").replace("/", "~1");
    }
    var JsonWorkspaceMetadata = class {
      filePath;
      ast;
      raw;
      changes = /* @__PURE__ */ new Map();
      hasLegacyTargetsName = true;
      constructor(filePath, ast, raw) {
        this.filePath = filePath;
        this.ast = ast;
        this.raw = raw;
      }
      get hasChanges() {
        return this.changes.size > 0;
      }
      get changeCount() {
        return this.changes.size;
      }
      getNodeValueFromAst(path) {
        const node = (0, jsonc_parser_1.findNodeAtLocation)(this.ast, path);
        return node && (0, jsonc_parser_1.getNodeValue)(node);
      }
      findChangesForPath(path) {
        return this.changes.get(path);
      }
      addChange(jsonPath, value, type) {
        let currentPath = "";
        for (let index = 0; index < jsonPath.length - 1; index++) {
          currentPath = currentPath + "/" + escapeKey(jsonPath[index]);
          if (this.changes.has(currentPath)) {
            return;
          }
        }
        const pathKey = "/" + jsonPath.map((k) => escapeKey(k)).join("/");
        for (const key of this.changes.keys()) {
          if (key.startsWith(pathKey + "/")) {
            this.changes.delete(key);
          }
        }
        this.changes.set(pathKey, { jsonPath, type, value });
      }
    };
    exports2.JsonWorkspaceMetadata = JsonWorkspaceMetadata;
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/workspace/json/utilities.js
var require_utilities = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/workspace/json/utilities.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createVirtualAstObject = createVirtualAstObject;
    var json_1 = require_json();
    function createVirtualAstObject(root, options = {}) {
      const reporter = (path, target, oldValue, newValue) => {
        if (!options.listener) {
          return;
        }
        if (oldValue === newValue || JSON.stringify(oldValue) === JSON.stringify(newValue)) {
          return;
        }
        if (Array.isArray(target)) {
          options.listener(path.slice(0, -1), target);
        } else {
          options.listener(path, newValue);
        }
      };
      return create(Array.isArray(root) ? [...root] : { ...root }, [], reporter, new Set(options.exclude), options.include?.length ? new Set(options.include) : void 0);
    }
    function create(obj, path, reporter, excluded = /* @__PURE__ */ new Set(), included) {
      return new Proxy(obj, {
        getOwnPropertyDescriptor(target, p) {
          if (excluded.has(p) || included && !included.has(p)) {
            return void 0;
          }
          return Reflect.getOwnPropertyDescriptor(target, p);
        },
        has(target, p) {
          if (typeof p === "symbol" || excluded.has(p)) {
            return false;
          }
          return Reflect.has(target, p);
        },
        get(target, p) {
          if (excluded.has(p) || included && !included.has(p)) {
            return void 0;
          }
          const value = Reflect.get(target, p);
          if (typeof p === "symbol") {
            return value;
          }
          if ((0, json_1.isJsonObject)(value) && !(value instanceof Map) || Array.isArray(value)) {
            return create(value, [...path, p], reporter);
          } else {
            return value;
          }
        },
        set(target, p, value) {
          if (excluded.has(p) || included && !included.has(p)) {
            return false;
          }
          if (value === void 0) {
            return this.deleteProperty?.(target, p) ?? false;
          }
          if (typeof p === "symbol") {
            return Reflect.set(target, p, value);
          }
          const existingValue = getCurrentValue(target, p);
          if (Reflect.set(target, p, value)) {
            reporter([...path, p], target, existingValue, value);
            return true;
          }
          return false;
        },
        deleteProperty(target, p) {
          if (excluded.has(p)) {
            return false;
          }
          if (typeof p === "symbol") {
            return Reflect.deleteProperty(target, p);
          }
          const existingValue = getCurrentValue(target, p);
          if (Reflect.deleteProperty(target, p)) {
            reporter([...path, p], target, existingValue, void 0);
            return true;
          }
          return true;
        },
        defineProperty(target, p, attributes) {
          if (typeof p === "symbol") {
            return Reflect.defineProperty(target, p, attributes);
          }
          return false;
        },
        ownKeys(target) {
          return Reflect.ownKeys(target).filter((p) => !excluded.has(p) && (!included || included.has(p)));
        }
      });
    }
    function getCurrentValue(target, property) {
      if (Array.isArray(target) && isFinite(+property)) {
        return target[+property];
      }
      if (target && property in target) {
        return target[property];
      }
      return void 0;
    }
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/workspace/json/reader.js
var require_reader = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/workspace/json/reader.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.readJsonWorkspace = readJsonWorkspace;
    var jsonc_parser_1 = require("jsonc-parser");
    var utils_1 = require_utils();
    var definitions_1 = require_definitions();
    var metadata_1 = require_metadata();
    var utilities_1 = require_utilities();
    var ANGULAR_WORKSPACE_EXTENSIONS = Object.freeze(["cli", "newProjectRoot", "schematics"]);
    var ANGULAR_PROJECT_EXTENSIONS = Object.freeze(["cli", "schematics", "projectType", "i18n"]);
    async function readJsonWorkspace(path, host, options = {}) {
      const raw = await host.readFile(path);
      if (raw === void 0) {
        throw new Error("Unable to read workspace file.");
      }
      const ast = (0, jsonc_parser_1.parseTree)(raw, void 0, { allowTrailingComma: true, disallowComments: false });
      if (ast?.type !== "object" || !ast.children) {
        throw new Error("Invalid workspace file - expected JSON object.");
      }
      const versionNode = (0, jsonc_parser_1.findNodeAtLocation)(ast, ["version"]);
      if (!versionNode) {
        throw new Error("Unknown format - version specifier not found.");
      }
      const version = versionNode.value;
      if (version !== 1) {
        throw new Error(`Invalid format version detected - Expected:[ 1 ] Found: [ ${version} ]`);
      }
      const context = {
        host,
        metadata: new metadata_1.JsonWorkspaceMetadata(path, ast, raw),
        trackChanges: true,
        unprefixedWorkspaceExtensions: /* @__PURE__ */ new Set([
          ...ANGULAR_WORKSPACE_EXTENSIONS,
          ...options.allowedWorkspaceExtensions ?? []
        ]),
        unprefixedProjectExtensions: /* @__PURE__ */ new Set([
          ...ANGULAR_PROJECT_EXTENSIONS,
          ...options.allowedProjectExtensions ?? []
        ]),
        error(message, _node) {
          throw new Error(message);
        },
        warn(message, _node) {
          console.warn(message);
        }
      };
      const workspace = parseWorkspace(ast, context);
      return workspace;
    }
    function parseWorkspace(workspaceNode, context) {
      const jsonMetadata = context.metadata;
      let projects;
      let extensions;
      if (!context.trackChanges) {
        extensions = /* @__PURE__ */ Object.create(null);
      }
      const workspaceNodeValue = (0, jsonc_parser_1.getNodeValue)(workspaceNode);
      for (const [name, value] of Object.entries(workspaceNodeValue)) {
        if (name === "$schema" || name === "version") {
        } else if (name === "projects") {
          const nodes = (0, jsonc_parser_1.findNodeAtLocation)(workspaceNode, ["projects"]);
          if (!(0, utils_1.isJsonObject)(value) || !nodes) {
            context.error('Invalid "projects" field found; expected an object.', value);
            continue;
          }
          projects = parseProjectsObject(nodes, context);
        } else {
          if (!context.unprefixedWorkspaceExtensions.has(name) && !/^[a-z]{1,3}-.*/.test(name)) {
            context.warn(`Workspace extension with invalid name (${name}) found.`, name);
          }
          if (extensions) {
            extensions[name] = value;
          }
        }
      }
      let collectionListener;
      if (context.trackChanges) {
        collectionListener = (name, newValue) => {
          jsonMetadata.addChange(["projects", name], newValue, "project");
        };
      }
      const projectCollection = new definitions_1.ProjectDefinitionCollection(projects, collectionListener);
      return {
        [metadata_1.JsonWorkspaceSymbol]: jsonMetadata,
        projects: projectCollection,
        // If not tracking changes the `extensions` variable will contain the parsed
        // values.  Otherwise the extensions are tracked via a virtual AST object.
        extensions: extensions ?? (0, utilities_1.createVirtualAstObject)(workspaceNodeValue, {
          exclude: ["$schema", "version", "projects"],
          listener(path, value) {
            jsonMetadata.addChange(path, value);
          }
        })
      };
    }
    function parseProjectsObject(projectsNode, context) {
      const projects = /* @__PURE__ */ Object.create(null);
      for (const [name, value] of Object.entries((0, jsonc_parser_1.getNodeValue)(projectsNode))) {
        const nodes = (0, jsonc_parser_1.findNodeAtLocation)(projectsNode, [name]);
        if (!(0, utils_1.isJsonObject)(value) || !nodes) {
          context.warn("Skipping invalid project value; expected an object.", value);
          continue;
        }
        projects[name] = parseProject(name, nodes, context);
      }
      return projects;
    }
    function parseProject(projectName, projectNode, context) {
      const jsonMetadata = context.metadata;
      let targets;
      let hasTargets = false;
      let extensions;
      let properties;
      if (!context.trackChanges) {
        extensions = /* @__PURE__ */ Object.create(null);
        properties = /* @__PURE__ */ Object.create(null);
      }
      const projectNodeValue = (0, jsonc_parser_1.getNodeValue)(projectNode);
      if (!("root" in projectNodeValue)) {
        throw new Error(`Project "${projectName}" is missing a required property "root".`);
      }
      for (const [name, value] of Object.entries(projectNodeValue)) {
        switch (name) {
          case "targets":
          case "architect": {
            const nodes = (0, jsonc_parser_1.findNodeAtLocation)(projectNode, [name]);
            if (!(0, utils_1.isJsonObject)(value) || !nodes) {
              context.error(`Invalid "${name}" field found; expected an object.`, value);
              break;
            }
            hasTargets = true;
            targets = parseTargetsObject(projectName, nodes, context);
            jsonMetadata.hasLegacyTargetsName = name === "architect";
            break;
          }
          case "prefix":
          case "root":
          case "sourceRoot":
            if (typeof value !== "string") {
              context.warn(`Project property "${name}" should be a string.`, value);
            }
            if (properties) {
              properties[name] = value;
            }
            break;
          default:
            if (!context.unprefixedProjectExtensions.has(name) && !/^[a-z]{1,3}-.*/.test(name)) {
              context.warn(`Project '${projectName}' contains extension with invalid name (${name}).`, name);
            }
            if (extensions) {
              extensions[name] = value;
            }
            break;
        }
      }
      let collectionListener;
      if (context.trackChanges) {
        collectionListener = (name, newValue, collection) => {
          if (hasTargets) {
            jsonMetadata.addChange(["projects", projectName, "targets", name], newValue, "target");
          } else {
            jsonMetadata.addChange(["projects", projectName, "targets"], collection, "targetcollection");
          }
        };
      }
      const base = {
        targets: new definitions_1.TargetDefinitionCollection(targets, collectionListener),
        // If not tracking changes the `extensions` variable will contain the parsed
        // values.  Otherwise the extensions are tracked via a virtual AST object.
        extensions: extensions ?? (0, utilities_1.createVirtualAstObject)(projectNodeValue, {
          exclude: ["architect", "prefix", "root", "sourceRoot", "targets"],
          listener(path, value) {
            jsonMetadata.addChange(["projects", projectName, ...path], value);
          }
        })
      };
      const baseKeys = new Set(Object.keys(base));
      const project = properties ?? (0, utilities_1.createVirtualAstObject)(projectNodeValue, {
        include: ["prefix", "root", "sourceRoot", ...baseKeys],
        listener(path, value) {
          if (!baseKeys.has(path[0])) {
            jsonMetadata.addChange(["projects", projectName, ...path], value);
          }
        }
      });
      return Object.assign(project, base);
    }
    function parseTargetsObject(projectName, targetsNode, context) {
      const jsonMetadata = context.metadata;
      const targets = /* @__PURE__ */ Object.create(null);
      for (const [name, value] of Object.entries((0, jsonc_parser_1.getNodeValue)(targetsNode))) {
        if (!(0, utils_1.isJsonObject)(value)) {
          context.warn("Skipping invalid target value; expected an object.", value);
          continue;
        }
        if (context.trackChanges) {
          targets[name] = (0, utilities_1.createVirtualAstObject)(value, {
            include: ["builder", "options", "configurations", "defaultConfiguration"],
            listener(path, value2) {
              jsonMetadata.addChange(["projects", projectName, "targets", name, ...path], value2);
            }
          });
        } else {
          targets[name] = value;
        }
      }
      return targets;
    }
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/workspace/json/writer.js
var require_writer = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/workspace/json/writer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.writeJsonWorkspace = writeJsonWorkspace;
    var jsonc_parser_1 = require("jsonc-parser");
    var node_os_1 = require("node:os");
    var metadata_1 = require_metadata();
    async function writeJsonWorkspace(workspace, host, path, options = {}) {
      const metadata = workspace[metadata_1.JsonWorkspaceSymbol];
      if (metadata) {
        if (!metadata.hasChanges) {
          return;
        }
        const data = updateJsonWorkspace(metadata);
        return host.writeFile(path ?? metadata.filePath, data);
      } else {
        if (!path) {
          throw new Error("path option is required");
        }
        const obj = convertJsonWorkspace(workspace, options.schema);
        const data = JSON.stringify(obj, null, 2);
        return host.writeFile(path, data);
      }
    }
    function convertJsonWorkspace(workspace, schema) {
      const obj = {
        $schema: schema || "./node_modules/@angular/cli/lib/config/schema.json",
        version: 1,
        ...workspace.extensions,
        ...isEmpty(workspace.projects) ? {} : { projects: convertJsonProjectCollection(workspace.projects) }
      };
      return obj;
    }
    function convertJsonProjectCollection(collection) {
      const projects = /* @__PURE__ */ Object.create(null);
      for (const [projectName, project] of collection) {
        projects[projectName] = convertJsonProject(project);
      }
      return projects;
    }
    function convertJsonProject(project) {
      let targets;
      if (project.targets.size > 0) {
        targets = /* @__PURE__ */ Object.create(null);
        for (const [targetName, target] of project.targets) {
          targets[targetName] = convertJsonTarget(target);
        }
      }
      const obj = {
        ...project.extensions,
        root: project.root,
        ...project.sourceRoot === void 0 ? {} : { sourceRoot: project.sourceRoot },
        ...project.prefix === void 0 ? {} : { prefix: project.prefix },
        ...targets === void 0 ? {} : { architect: targets }
      };
      return obj;
    }
    function isEmpty(obj) {
      return obj === void 0 || Object.keys(obj).length === 0;
    }
    function convertJsonTarget(target) {
      return {
        builder: target.builder,
        ...isEmpty(target.options) ? {} : { options: target.options },
        ...isEmpty(target.configurations) ? {} : { configurations: target.configurations },
        ...target.defaultConfiguration === void 0 ? {} : { defaultConfiguration: target.defaultConfiguration }
      };
    }
    function convertJsonTargetCollection(collection) {
      const targets = /* @__PURE__ */ Object.create(null);
      for (const [projectName, target] of collection) {
        targets[projectName] = convertJsonTarget(target);
      }
      return targets;
    }
    function normalizeValue(value, type) {
      if (value === void 0) {
        return void 0;
      }
      switch (type) {
        case "project":
          return convertJsonProject(value);
        case "projectcollection": {
          const projects = convertJsonProjectCollection(value);
          return isEmpty(projects) ? void 0 : projects;
        }
        case "target":
          return convertJsonTarget(value);
        case "targetcollection": {
          const targets = convertJsonTargetCollection(value);
          return isEmpty(targets) ? void 0 : targets;
        }
        default:
          return value;
      }
    }
    function updateJsonWorkspace(metadata) {
      let { raw: content } = metadata;
      const { changes, hasLegacyTargetsName } = metadata;
      for (const { jsonPath, value, type } of changes.values()) {
        if (hasLegacyTargetsName && jsonPath[2] === "targets") {
          jsonPath[2] = "architect";
        }
        const edits = (0, jsonc_parser_1.modify)(content, jsonPath, normalizeValue(value, type), {
          formattingOptions: {
            insertSpaces: true,
            tabSize: 2,
            eol: getEOL(content)
          }
        });
        content = (0, jsonc_parser_1.applyEdits)(content, edits);
      }
      return content;
    }
    function getEOL(content) {
      const CRLF = "\r\n";
      const LF = "\n";
      const newlines = content.match(/(?:\r?\n)/g);
      if (newlines?.length) {
        const crlf = newlines.filter((l) => l === CRLF).length;
        const lf = newlines.length - crlf;
        return crlf > lf ? CRLF : LF;
      }
      return node_os_1.EOL;
    }
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/workspace/core.js
var require_core = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/workspace/core.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WorkspaceFormat = void 0;
    exports2._test_addWorkspaceFile = _test_addWorkspaceFile;
    exports2._test_removeWorkspaceFile = _test_removeWorkspaceFile;
    exports2.readWorkspace = readWorkspace;
    exports2.writeWorkspace = writeWorkspace;
    var virtual_fs_1 = require_virtual_fs();
    var reader_1 = require_reader();
    var writer_1 = require_writer();
    var formatLookup = /* @__PURE__ */ new WeakMap();
    var WorkspaceFormat;
    (function(WorkspaceFormat2) {
      WorkspaceFormat2[WorkspaceFormat2["JSON"] = 0] = "JSON";
    })(WorkspaceFormat || (exports2.WorkspaceFormat = WorkspaceFormat = {}));
    function _test_addWorkspaceFile(name, format) {
      workspaceFiles[name] = format;
    }
    function _test_removeWorkspaceFile(name) {
      delete workspaceFiles[name];
    }
    var workspaceFiles = {
      "angular.json": WorkspaceFormat.JSON,
      ".angular.json": WorkspaceFormat.JSON
    };
    async function readWorkspace(path, host, format) {
      if (await host.isDirectory(path)) {
        const directory = (0, virtual_fs_1.normalize)(path);
        let found = false;
        for (const [name, nameFormat] of Object.entries(workspaceFiles)) {
          if (format !== void 0 && format !== nameFormat) {
            continue;
          }
          const potential = (0, virtual_fs_1.getSystemPath)((0, virtual_fs_1.join)(directory, name));
          if (await host.isFile(potential)) {
            path = potential;
            format = nameFormat;
            found = true;
            break;
          }
        }
        if (!found) {
          throw new Error("Unable to locate a workspace file for workspace path. Are you missing an `angular.json` or `.angular.json` file?");
        }
      } else if (format === void 0) {
        const filename = (0, virtual_fs_1.basename)((0, virtual_fs_1.normalize)(path));
        if (filename in workspaceFiles) {
          format = workspaceFiles[filename];
        }
      }
      if (format === void 0) {
        throw new Error("Unable to determine format for workspace path.");
      }
      let workspace;
      switch (format) {
        case WorkspaceFormat.JSON:
          workspace = await (0, reader_1.readJsonWorkspace)(path, host);
          break;
        default:
          throw new Error("Unsupported workspace format.");
      }
      formatLookup.set(workspace, WorkspaceFormat.JSON);
      return { workspace };
    }
    async function writeWorkspace(workspace, host, path, format) {
      if (format === void 0) {
        format = formatLookup.get(workspace);
        if (format === void 0) {
          throw new Error("A format is required for custom workspace objects.");
        }
      }
      switch (format) {
        case WorkspaceFormat.JSON:
          return (0, writer_1.writeJsonWorkspace)(workspace, host, path);
        default:
          throw new Error("Unsupported workspace format.");
      }
    }
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/workspace/index.js
var require_workspace = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/workspace/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.writeWorkspace = exports2.readWorkspace = exports2.WorkspaceFormat = exports2.createWorkspaceHost = void 0;
    __exportStar(require_definitions(), exports2);
    var host_1 = require_host2();
    Object.defineProperty(exports2, "createWorkspaceHost", { enumerable: true, get: function() {
      return host_1.createWorkspaceHost;
    } });
    var core_1 = require_core();
    Object.defineProperty(exports2, "WorkspaceFormat", { enumerable: true, get: function() {
      return core_1.WorkspaceFormat;
    } });
    Object.defineProperty(exports2, "readWorkspace", { enumerable: true, get: function() {
      return core_1.readWorkspace;
    } });
    Object.defineProperty(exports2, "writeWorkspace", { enumerable: true, get: function() {
      return core_1.writeWorkspace;
    } });
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/index.js
var require_src = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/src/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || /* @__PURE__ */ function() {
      var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.workspaces = exports2.logging = exports2.json = void 0;
    var json = __importStar(require_json());
    exports2.json = json;
    var logging = __importStar(require_logger2());
    exports2.logging = logging;
    var workspaces = __importStar(require_workspace());
    exports2.workspaces = workspaces;
    __exportStar(require_exception(), exports2);
    __exportStar(require_json(), exports2);
    __exportStar(require_utils2(), exports2);
    __exportStar(require_virtual_fs(), exports2);
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/formats/html-selector.js
var require_html_selector = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/formats/html-selector.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.htmlSelectorFormat = void 0;
    var unicodeRanges = [
      [192, 214],
      [216, 246],
      [248, 893],
      [895, 8191],
      [8204, 8205],
      [8255, 8256],
      [8304, 8591],
      [11264, 12271],
      [12289, 55295],
      [63744, 64975],
      [65008, 65533],
      [65536, 983039]
    ];
    function isValidElementName(name) {
      let regex = "^[a-zA-Z][";
      regex += "-.0-9_a-zA-Z\\u{B7}";
      for (const range of unicodeRanges) {
        regex += `\\u{${range[0].toString(16)}}-\\u{${range[1].toString(16)}}`;
      }
      regex += "]*$";
      return new RegExp(regex, "u").test(name);
    }
    exports2.htmlSelectorFormat = {
      name: "html-selector",
      formatter: {
        async: false,
        validate: (name) => typeof name === "string" && isValidElementName(name)
      }
    };
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/formats/path.js
var require_path2 = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/formats/path.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.pathFormat = void 0;
    var core_1 = require_src();
    exports2.pathFormat = {
      name: "path",
      formatter: {
        async: false,
        validate: (path) => {
          return path === (0, core_1.normalize)(path);
        }
      }
    };
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/formats/index.js
var require_formats = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/formats/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.standardFormats = exports2.pathFormat = exports2.htmlSelectorFormat = void 0;
    var html_selector_1 = require_html_selector();
    var path_1 = require_path2();
    var html_selector_2 = require_html_selector();
    Object.defineProperty(exports2, "htmlSelectorFormat", { enumerable: true, get: function() {
      return html_selector_2.htmlSelectorFormat;
    } });
    var path_2 = require_path2();
    Object.defineProperty(exports2, "pathFormat", { enumerable: true, get: function() {
      return path_2.pathFormat;
    } });
    exports2.standardFormats = [html_selector_1.htmlSelectorFormat, path_1.pathFormat];
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/tree/interface.js
var require_interface3 = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/tree/interface.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Tree = exports2.TreeSymbol = exports2.FileVisitorCancelToken = exports2.MergeStrategy = void 0;
    var MergeStrategy2;
    (function(MergeStrategy3) {
      MergeStrategy3[MergeStrategy3["AllowOverwriteConflict"] = 2] = "AllowOverwriteConflict";
      MergeStrategy3[MergeStrategy3["AllowCreationConflict"] = 4] = "AllowCreationConflict";
      MergeStrategy3[MergeStrategy3["AllowDeleteConflict"] = 8] = "AllowDeleteConflict";
      MergeStrategy3[MergeStrategy3["Default"] = 0] = "Default";
      MergeStrategy3[MergeStrategy3["Error"] = 1] = "Error";
      MergeStrategy3[MergeStrategy3["ContentOnly"] = 2] = "ContentOnly";
      MergeStrategy3[MergeStrategy3["Overwrite"] = 14] = "Overwrite";
    })(MergeStrategy2 || (exports2.MergeStrategy = MergeStrategy2 = {}));
    exports2.FileVisitorCancelToken = Symbol();
    exports2.TreeSymbol = function() {
      const globalSymbol = typeof window == "object" && window.window === window && window.Symbol || typeof self == "object" && self.self === self && self.Symbol || typeof global == "object" && global.global === global && global.Symbol;
      if (!globalSymbol) {
        return Symbol("schematic-tree");
      }
      if (!globalSymbol.schematicTree) {
        globalSymbol.schematicTree = Symbol("schematic-tree");
      }
      return globalSymbol.schematicTree;
    }();
    exports2.Tree = Object.freeze({
      isTree(maybeTree) {
        return exports2.TreeSymbol in maybeTree;
      }
    });
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/exception/exception.js
var require_exception2 = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/exception/exception.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UnimplementedException = exports2.UnsuccessfulWorkflowExecution = exports2.MergeConflictException = exports2.InvalidUpdateRecordException = exports2.ContentHasMutatedException = exports2.FileAlreadyExistException = exports2.FileDoesNotExistException = exports2.SchematicsException = void 0;
    var core_1 = require_src();
    var SchematicsException = class extends core_1.BaseException {
    };
    exports2.SchematicsException = SchematicsException;
    var FileDoesNotExistException = class extends core_1.BaseException {
      constructor(path) {
        super(`Path "${path}" does not exist.`);
      }
    };
    exports2.FileDoesNotExistException = FileDoesNotExistException;
    var FileAlreadyExistException = class extends core_1.BaseException {
      constructor(path) {
        super(`Path "${path}" already exist.`);
      }
    };
    exports2.FileAlreadyExistException = FileAlreadyExistException;
    var ContentHasMutatedException = class extends core_1.BaseException {
      constructor(path) {
        super(`Content at path "${path}" has changed between the start and the end of an update.`);
      }
    };
    exports2.ContentHasMutatedException = ContentHasMutatedException;
    var InvalidUpdateRecordException = class extends core_1.BaseException {
      constructor() {
        super(`Invalid record instance.`);
      }
    };
    exports2.InvalidUpdateRecordException = InvalidUpdateRecordException;
    var MergeConflictException = class extends core_1.BaseException {
      constructor(path) {
        super(`A merge conflicted on path "${path}".`);
      }
    };
    exports2.MergeConflictException = MergeConflictException;
    var UnsuccessfulWorkflowExecution = class extends core_1.BaseException {
      constructor() {
        super("Workflow did not execute successfully.");
      }
    };
    exports2.UnsuccessfulWorkflowExecution = UnsuccessfulWorkflowExecution;
    var UnimplementedException = class extends core_1.BaseException {
      constructor() {
        super("This function is unimplemented.");
      }
    };
    exports2.UnimplementedException = UnimplementedException;
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/tree/delegate.js
var require_delegate = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/tree/delegate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DelegateTree = void 0;
    var interface_1 = require_interface3();
    var DelegateTree = class {
      _other;
      constructor(_other) {
        this._other = _other;
      }
      branch() {
        return this._other.branch();
      }
      merge(other, strategy) {
        this._other.merge(other, strategy);
      }
      get root() {
        return this._other.root;
      }
      // Readonly.
      read(path) {
        return this._other.read(path);
      }
      readText(path) {
        return this._other.readText(path);
      }
      readJson(path) {
        return this._other.readJson(path);
      }
      exists(path) {
        return this._other.exists(path);
      }
      get(path) {
        return this._other.get(path);
      }
      getDir(path) {
        return this._other.getDir(path);
      }
      visit(visitor) {
        return this._other.visit(visitor);
      }
      // Change content of host files.
      overwrite(path, content) {
        return this._other.overwrite(path, content);
      }
      beginUpdate(path) {
        return this._other.beginUpdate(path);
      }
      commitUpdate(record) {
        return this._other.commitUpdate(record);
      }
      // Structural methods.
      create(path, content) {
        return this._other.create(path, content);
      }
      delete(path) {
        return this._other.delete(path);
      }
      rename(from, to) {
        return this._other.rename(from, to);
      }
      apply(action, strategy) {
        return this._other.apply(action, strategy);
      }
      get actions() {
        return this._other.actions;
      }
      [interface_1.TreeSymbol]() {
        return this;
      }
    };
    exports2.DelegateTree = DelegateTree;
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/tree/entry.js
var require_entry = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/tree/entry.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LazyFileEntry = exports2.SimpleFileEntry = void 0;
    var SimpleFileEntry = class {
      _path;
      _content;
      constructor(_path, _content) {
        this._path = _path;
        this._content = _content;
      }
      get path() {
        return this._path;
      }
      get content() {
        return this._content;
      }
    };
    exports2.SimpleFileEntry = SimpleFileEntry;
    var LazyFileEntry = class {
      _path;
      _load;
      _content = null;
      constructor(_path, _load) {
        this._path = _path;
        this._load = _load;
      }
      get path() {
        return this._path;
      }
      get content() {
        return this._content || (this._content = this._load(this._path));
      }
    };
    exports2.LazyFileEntry = LazyFileEntry;
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/tree/recorder.js
var require_recorder = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/tree/recorder.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateRecorderBase = exports2.IndexOutOfBoundException = void 0;
    var core_1 = require_src();
    var magic_string_1 = __importDefault(require("magic-string"));
    var exception_1 = require_exception2();
    var IndexOutOfBoundException = class extends core_1.BaseException {
      constructor(index, min, max = Infinity) {
        super(`Index ${index} outside of range [${min}, ${max}].`);
      }
    };
    exports2.IndexOutOfBoundException = IndexOutOfBoundException;
    var UpdateRecorderBase = class _UpdateRecorderBase {
      data;
      bom;
      _path;
      content;
      constructor(data, path, encoding = "utf-8", bom = false) {
        this.data = data;
        this.bom = bom;
        let text;
        try {
          text = new TextDecoder(encoding, { fatal: true, ignoreBOM: false }).decode(data);
        } catch (e) {
          if (e instanceof TypeError) {
            throw new Error(`Failed to decode "${path}" as ${encoding} text.`);
          }
          throw e;
        }
        this._path = path;
        this.content = new magic_string_1.default(text);
      }
      static createFromFileEntry(entry) {
        const c0 = entry.content.byteLength > 0 && entry.content.readUInt8(0);
        const c1 = entry.content.byteLength > 1 && entry.content.readUInt8(1);
        const c2 = entry.content.byteLength > 2 && entry.content.readUInt8(2);
        if (c0 == 239 && c1 == 187 && c2 == 191) {
          return new _UpdateRecorderBase(entry.content, entry.path, "utf-8", true);
        } else if (c0 === 255 && c1 == 254) {
          return new _UpdateRecorderBase(entry.content, entry.path, "utf-16le", true);
        } else if (c0 === 254 && c1 == 255) {
          return new _UpdateRecorderBase(entry.content, entry.path, "utf-16be", true);
        }
        return new _UpdateRecorderBase(entry.content, entry.path);
      }
      get path() {
        return this._path;
      }
      _assertIndex(index) {
        if (index < 0 || index > this.content.original.length) {
          throw new IndexOutOfBoundException(index, 0, this.content.original.length);
        }
      }
      // These just record changes.
      insertLeft(index, content) {
        this._assertIndex(index);
        this.content.appendLeft(index, content.toString());
        return this;
      }
      insertRight(index, content) {
        this._assertIndex(index);
        this.content.appendRight(index, content.toString());
        return this;
      }
      remove(index, length) {
        this._assertIndex(index);
        this.content.remove(index, index + length);
        return this;
      }
      apply(content) {
        if (!content.equals(this.data)) {
          throw new exception_1.ContentHasMutatedException(this.path);
        }
        const result = Buffer.from((this.bom ? "\uFEFF" : "") + this.content.toString(), "utf-8");
        return result;
      }
    };
    exports2.UpdateRecorderBase = UpdateRecorderBase;
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/tree/scoped.js
var require_scoped2 = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/tree/scoped.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ScopedTree = void 0;
    var core_1 = require_src();
    var delegate_1 = require_delegate();
    var interface_1 = require_interface3();
    var ScopedFileEntry = class {
      _base;
      scope;
      constructor(_base, scope) {
        this._base = _base;
        this.scope = scope;
      }
      get path() {
        return (0, core_1.join)(core_1.NormalizedRoot, (0, core_1.relative)(this.scope, this._base.path));
      }
      get content() {
        return this._base.content;
      }
    };
    var ScopedDirEntry = class _ScopedDirEntry {
      _base;
      scope;
      constructor(_base, scope) {
        this._base = _base;
        this.scope = scope;
      }
      get parent() {
        if (!this._base.parent || this._base.path == this.scope) {
          return null;
        }
        return new _ScopedDirEntry(this._base.parent, this.scope);
      }
      get path() {
        return (0, core_1.join)(core_1.NormalizedRoot, (0, core_1.relative)(this.scope, this._base.path));
      }
      get subdirs() {
        return this._base.subdirs;
      }
      get subfiles() {
        return this._base.subfiles;
      }
      dir(name) {
        const entry = this._base.dir(name);
        return entry && new _ScopedDirEntry(entry, this.scope);
      }
      file(name) {
        const entry = this._base.file(name);
        return entry && new ScopedFileEntry(entry, this.scope);
      }
      visit(visitor) {
        return this._base.visit((path, entry) => {
          visitor((0, core_1.join)(core_1.NormalizedRoot, (0, core_1.relative)(this.scope, path)), entry && new ScopedFileEntry(entry, this.scope));
        });
      }
    };
    var ScopedTree = class _ScopedTree {
      _base;
      _root;
      constructor(_base, scope) {
        this._base = _base;
        const normalizedScope = (0, core_1.normalize)("/" + scope);
        this._root = new ScopedDirEntry(this._base.getDir(normalizedScope), normalizedScope);
      }
      get root() {
        return this._root;
      }
      branch() {
        return new _ScopedTree(this._base.branch(), this._root.scope);
      }
      merge(other, strategy) {
        const self2 = this;
        const delegate = new class extends delegate_1.DelegateTree {
          get actions() {
            return other.actions.map((action) => self2._fullPathAction(action));
          }
        }(other);
        this._base.merge(delegate, strategy);
      }
      // Readonly.
      read(path) {
        return this._base.read(this._fullPath(path));
      }
      readText(path) {
        return this._base.readText(this._fullPath(path));
      }
      readJson(path) {
        return this._base.readJson(this._fullPath(path));
      }
      exists(path) {
        return this._base.exists(this._fullPath(path));
      }
      get(path) {
        const entry = this._base.get(this._fullPath(path));
        return entry && new ScopedFileEntry(entry, this._root.scope);
      }
      getDir(path) {
        const entry = this._base.getDir(this._fullPath(path));
        return entry && new ScopedDirEntry(entry, this._root.scope);
      }
      visit(visitor) {
        return this._root.visit(visitor);
      }
      // Change content of host files.
      overwrite(path, content) {
        return this._base.overwrite(this._fullPath(path), content);
      }
      beginUpdate(path) {
        return this._base.beginUpdate(this._fullPath(path));
      }
      commitUpdate(record) {
        return this._base.commitUpdate(record);
      }
      // Structural methods.
      create(path, content) {
        return this._base.create(this._fullPath(path), content);
      }
      delete(path) {
        return this._base.delete(this._fullPath(path));
      }
      rename(from, to) {
        return this._base.rename(this._fullPath(from), this._fullPath(to));
      }
      apply(action, strategy) {
        return this._base.apply(this._fullPathAction(action), strategy);
      }
      get actions() {
        const scopedActions = [];
        for (const action of this._base.actions) {
          if (!action.path.startsWith(this._root.scope + "/")) {
            continue;
          }
          if (action.kind !== "r") {
            scopedActions.push({
              ...action,
              path: (0, core_1.join)(core_1.NormalizedRoot, (0, core_1.relative)(this._root.scope, action.path))
            });
          } else if (action.to.startsWith(this._root.scope + "/")) {
            scopedActions.push({
              ...action,
              path: (0, core_1.join)(core_1.NormalizedRoot, (0, core_1.relative)(this._root.scope, action.path)),
              to: (0, core_1.join)(core_1.NormalizedRoot, (0, core_1.relative)(this._root.scope, action.to))
            });
          }
        }
        return scopedActions;
      }
      [interface_1.TreeSymbol]() {
        return this;
      }
      _fullPath(path) {
        return (0, core_1.join)(this._root.scope, (0, core_1.normalize)("/" + path));
      }
      _fullPathAction(action) {
        let fullPathAction;
        if (action.kind === "r") {
          fullPathAction = {
            ...action,
            path: this._fullPath(action.path),
            to: this._fullPath(action.to)
          };
        } else {
          fullPathAction = {
            ...action,
            path: this._fullPath(action.path)
          };
        }
        return fullPathAction;
      }
    };
    exports2.ScopedTree = ScopedTree;
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/tree/host-tree.js
var require_host_tree = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/tree/host-tree.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FilterHostTree = exports2.HostCreateTree = exports2.HostTree = exports2.HostDirEntry = void 0;
    var core_1 = require_src();
    var jsonc_parser_1 = require("jsonc-parser");
    var exception_1 = require_exception2();
    var delegate_1 = require_delegate();
    var entry_1 = require_entry();
    var interface_1 = require_interface3();
    var recorder_1 = require_recorder();
    var scoped_1 = require_scoped2();
    var _uniqueId = 0;
    var HostDirEntry = class {
      parent;
      path;
      _host;
      _tree;
      constructor(parent, path, _host, _tree) {
        this.parent = parent;
        this.path = path;
        this._host = _host;
        this._tree = _tree;
      }
      get subdirs() {
        return this._host.list(this.path).filter((fragment) => this._host.isDirectory((0, core_1.join)(this.path, fragment)));
      }
      get subfiles() {
        return this._host.list(this.path).filter((fragment) => this._host.isFile((0, core_1.join)(this.path, fragment)));
      }
      dir(name) {
        return this._tree.getDir((0, core_1.join)(this.path, name));
      }
      file(name) {
        return this._tree.get((0, core_1.join)(this.path, name));
      }
      visit(visitor) {
        try {
          this.getSubfilesRecursively().forEach((file) => visitor(file.path, file));
        } catch (e) {
          if (e !== interface_1.FileVisitorCancelToken) {
            throw e;
          }
        }
      }
      getSubfilesRecursively() {
        function _recurse(entry) {
          return entry.subdirs.reduce((files, subdir) => [...files, ..._recurse(entry.dir(subdir))], entry.subfiles.map((subfile) => entry.file(subfile)));
        }
        return _recurse(this);
      }
    };
    exports2.HostDirEntry = HostDirEntry;
    var HostTree = class _HostTree {
      _backend;
      _id = --_uniqueId;
      _record;
      _recordSync;
      _ancestry = /* @__PURE__ */ new Set();
      _dirCache = /* @__PURE__ */ new Map();
      [interface_1.TreeSymbol]() {
        return this;
      }
      static isHostTree(tree) {
        if (tree instanceof _HostTree) {
          return true;
        }
        if (typeof tree === "object" && typeof tree._ancestry === "object") {
          return true;
        }
        return false;
      }
      constructor(_backend = new core_1.virtualFs.Empty()) {
        this._backend = _backend;
        this._record = new core_1.virtualFs.CordHost(new core_1.virtualFs.SafeReadonlyHost(_backend));
        this._recordSync = new core_1.virtualFs.SyncDelegateHost(this._record);
      }
      _normalizePath(path) {
        return (0, core_1.normalize)("/" + path);
      }
      _willCreate(path) {
        return this._record.willCreate(path);
      }
      _willOverwrite(path) {
        return this._record.willOverwrite(path);
      }
      _willDelete(path) {
        return this._record.willDelete(path);
      }
      _willRename(path) {
        return this._record.willRename(path);
      }
      branch() {
        const branchedTree = new _HostTree(this._backend);
        branchedTree._record = this._record.clone();
        branchedTree._recordSync = new core_1.virtualFs.SyncDelegateHost(branchedTree._record);
        branchedTree._ancestry = new Set(this._ancestry).add(this._id);
        return branchedTree;
      }
      isAncestorOf(tree) {
        if (tree instanceof _HostTree) {
          return tree._ancestry.has(this._id);
        }
        if (tree instanceof delegate_1.DelegateTree) {
          return this.isAncestorOf(tree._other);
        }
        if (tree instanceof scoped_1.ScopedTree) {
          return this.isAncestorOf(tree._base);
        }
        return false;
      }
      merge(other, strategy = interface_1.MergeStrategy.Default) {
        if (other === this) {
          return;
        }
        if (this.isAncestorOf(other)) {
          strategy |= interface_1.MergeStrategy.Overwrite;
        }
        const creationConflictAllowed = (strategy & interface_1.MergeStrategy.AllowCreationConflict) == interface_1.MergeStrategy.AllowCreationConflict;
        const overwriteConflictAllowed = (strategy & interface_1.MergeStrategy.AllowOverwriteConflict) == interface_1.MergeStrategy.AllowOverwriteConflict;
        const deleteConflictAllowed = (strategy & interface_1.MergeStrategy.AllowDeleteConflict) == interface_1.MergeStrategy.AllowDeleteConflict;
        other.actions.forEach((action) => {
          switch (action.kind) {
            case "c": {
              const { path, content } = action;
              if (this._willCreate(path) || this._willOverwrite(path) || this.exists(path)) {
                const existingContent = this.read(path);
                if (existingContent && content.equals(existingContent)) {
                  return;
                }
                if (!creationConflictAllowed) {
                  throw new exception_1.MergeConflictException(path);
                }
                this._record.overwrite(path, content).subscribe();
              } else {
                this._record.create(path, content).subscribe();
              }
              return;
            }
            case "o": {
              const { path, content } = action;
              if (this._willDelete(path) && !overwriteConflictAllowed) {
                throw new exception_1.MergeConflictException(path);
              }
              if (this._willOverwrite(path)) {
                const existingContent = this.read(path);
                if (existingContent && content.equals(existingContent)) {
                  return;
                }
                if (!overwriteConflictAllowed) {
                  throw new exception_1.MergeConflictException(path);
                }
              }
              this._record.write(path, content).subscribe();
              return;
            }
            case "r": {
              const { path, to } = action;
              if (this._willDelete(path)) {
                throw new exception_1.MergeConflictException(path);
              }
              if (this._willRename(path)) {
                if (this._record.willRenameTo(path, to)) {
                  return;
                }
                throw new exception_1.MergeConflictException(path);
              }
              this.rename(path, to);
              return;
            }
            case "d": {
              const { path } = action;
              if (this._willDelete(path)) {
                return;
              }
              if (!this.exists(path) && !deleteConflictAllowed) {
                throw new exception_1.MergeConflictException(path);
              }
              this._recordSync.delete(path);
              return;
            }
          }
        });
      }
      get root() {
        return this.getDir("/");
      }
      // Readonly.
      read(path) {
        const entry = this.get(path);
        return entry ? entry.content : null;
      }
      readText(path) {
        const data = this.read(path);
        if (data === null) {
          throw new exception_1.FileDoesNotExistException(path);
        }
        const decoder = new TextDecoder("utf-8", { fatal: true });
        try {
          return decoder.decode(data);
        } catch (e) {
          if (e instanceof TypeError || e.code === "ERR_ENCODING_INVALID_ENCODED_DATA") {
            throw new Error(`Failed to decode "${path}" as UTF-8 text.`);
          }
          throw e;
        }
      }
      readJson(path) {
        const content = this.readText(path);
        const errors = [];
        const result = (0, jsonc_parser_1.parse)(content, errors, { allowTrailingComma: true });
        if (errors[0]) {
          const { error, offset } = errors[0];
          throw new Error(`Failed to parse "${path}" as JSON. ${(0, jsonc_parser_1.printParseErrorCode)(error)} at offset: ${offset}.`);
        }
        return result;
      }
      exists(path) {
        return this._recordSync.isFile(this._normalizePath(path));
      }
      get(path) {
        const p = this._normalizePath(path);
        if (this._recordSync.isDirectory(p)) {
          throw new core_1.PathIsDirectoryException(p);
        }
        if (!this._recordSync.exists(p)) {
          return null;
        }
        return new entry_1.LazyFileEntry(p, () => Buffer.from(this._recordSync.read(p)));
      }
      getDir(path) {
        const p = this._normalizePath(path);
        if (this._recordSync.isFile(p)) {
          throw new core_1.PathIsFileException(p);
        }
        let maybeCache = this._dirCache.get(p);
        if (!maybeCache) {
          let parent = (0, core_1.dirname)(p);
          if (p === parent) {
            parent = null;
          }
          maybeCache = new HostDirEntry(parent && this.getDir(parent), p, this._recordSync, this);
          this._dirCache.set(p, maybeCache);
        }
        return maybeCache;
      }
      visit(visitor) {
        this.root.visit((path, entry) => {
          visitor(path, entry);
        });
      }
      // Change content of host files.
      overwrite(path, content) {
        const p = this._normalizePath(path);
        if (!this._recordSync.exists(p)) {
          throw new exception_1.FileDoesNotExistException(p);
        }
        const c = typeof content == "string" ? Buffer.from(content) : content;
        this._record.overwrite(p, c).subscribe();
      }
      beginUpdate(path) {
        const entry = this.get(path);
        if (!entry) {
          throw new exception_1.FileDoesNotExistException(path);
        }
        return recorder_1.UpdateRecorderBase.createFromFileEntry(entry);
      }
      commitUpdate(record) {
        if (record instanceof recorder_1.UpdateRecorderBase) {
          const path = record.path;
          const entry = this.get(path);
          if (!entry) {
            throw new exception_1.ContentHasMutatedException(path);
          } else {
            const newContent = record.apply(entry.content);
            if (!newContent.equals(entry.content)) {
              this.overwrite(path, newContent);
            }
          }
        } else {
          throw new exception_1.InvalidUpdateRecordException();
        }
      }
      // Structural methods.
      create(path, content) {
        const p = this._normalizePath(path);
        if (this._recordSync.exists(p)) {
          throw new exception_1.FileAlreadyExistException(p);
        }
        const c = typeof content == "string" ? Buffer.from(content) : content;
        this._record.create(p, c).subscribe();
      }
      delete(path) {
        this._recordSync.delete(this._normalizePath(path));
      }
      rename(from, to) {
        this._recordSync.rename(this._normalizePath(from), this._normalizePath(to));
      }
      apply(action, strategy) {
        throw new exception_1.SchematicsException("Apply not implemented on host trees.");
      }
      *generateActions() {
        for (const record of this._record.records()) {
          switch (record.kind) {
            case "create":
              yield {
                id: this._id,
                parent: 0,
                kind: "c",
                path: record.path,
                content: Buffer.from(record.content)
              };
              break;
            case "overwrite":
              yield {
                id: this._id,
                parent: 0,
                kind: "o",
                path: record.path,
                content: Buffer.from(record.content)
              };
              break;
            case "rename":
              yield {
                id: this._id,
                parent: 0,
                kind: "r",
                path: record.from,
                to: record.to
              };
              break;
            case "delete":
              yield {
                id: this._id,
                parent: 0,
                kind: "d",
                path: record.path
              };
              break;
          }
        }
      }
      get actions() {
        return Array.from(this.generateActions());
      }
    };
    exports2.HostTree = HostTree;
    var HostCreateTree = class extends HostTree {
      constructor(host) {
        super();
        const tempHost = new HostTree(host);
        tempHost.visit((path) => {
          const content = tempHost.read(path);
          if (content) {
            this.create(path, content);
          }
        });
      }
    };
    exports2.HostCreateTree = HostCreateTree;
    var FilterHostTree = class extends HostTree {
      constructor(tree, filter = () => true) {
        const newBackend = new core_1.virtualFs.SimpleMemoryHost();
        const originalBackend = tree._backend;
        const pendingPaths = ["/"];
        while (pendingPaths.length > 0) {
          const currentPath = pendingPaths.pop();
          if (currentPath === void 0) {
            break;
          }
          let isDirectory = false;
          originalBackend.isDirectory(currentPath).subscribe((val) => isDirectory = val);
          if (isDirectory) {
            originalBackend.list(currentPath).subscribe((val) => pendingPaths.push(...val.map((p) => (0, core_1.join)(currentPath, p))));
            continue;
          }
          let isFile = false;
          originalBackend.isFile(currentPath).subscribe((val) => isFile = val);
          if (!isFile || !filter(currentPath)) {
            continue;
          }
          let content = null;
          originalBackend.read(currentPath).subscribe((val) => content = val);
          if (content !== null) {
            newBackend.write(currentPath, content).subscribe();
          }
        }
        super(newBackend);
        for (const action of tree.actions) {
          if (!filter(action.path)) {
            continue;
          }
          switch (action.kind) {
            case "c":
              this.create(action.path, action.content);
              break;
            case "d":
              this.delete(action.path);
              break;
            case "o":
              this.overwrite(action.path, action.content);
              break;
            case "r":
              this.rename(action.path, action.to);
              break;
          }
        }
      }
    };
    exports2.FilterHostTree = FilterHostTree;
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/tree/static.js
var require_static = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/tree/static.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.empty = empty;
    exports2.branch = branch;
    exports2.merge = merge;
    exports2.partition = partition;
    var exception_1 = require_exception2();
    var host_tree_1 = require_host_tree();
    var interface_1 = require_interface3();
    function empty() {
      return new host_tree_1.HostTree();
    }
    function branch(tree) {
      return tree.branch();
    }
    function merge(tree, other, strategy = interface_1.MergeStrategy.Default) {
      tree.merge(other, strategy);
      return tree;
    }
    function partition(tree, predicate) {
      if (tree instanceof host_tree_1.HostTree) {
        return [
          new host_tree_1.FilterHostTree(tree, predicate),
          new host_tree_1.FilterHostTree(tree, (path, entry) => !predicate(path, entry))
        ];
      } else {
        throw new exception_1.SchematicsException("Tree type is not supported.");
      }
    }
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/tree/null.js
var require_null = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/tree/null.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NullTree = exports2.NullTreeDirEntry = exports2.CannotCreateFileException = void 0;
    var core_1 = require_src();
    var exception_1 = require_exception2();
    var interface_1 = require_interface3();
    var recorder_1 = require_recorder();
    var CannotCreateFileException = class extends core_1.BaseException {
      constructor(path) {
        super(`Cannot create file "${path}".`);
      }
    };
    exports2.CannotCreateFileException = CannotCreateFileException;
    var NullTreeDirEntry = class _NullTreeDirEntry {
      path;
      get parent() {
        return this.path == "/" ? null : new _NullTreeDirEntry((0, core_1.dirname)(this.path));
      }
      constructor(path) {
        this.path = path;
      }
      subdirs = [];
      subfiles = [];
      dir(name) {
        return new _NullTreeDirEntry((0, core_1.join)(this.path, name));
      }
      file(_name) {
        return null;
      }
      visit() {
      }
    };
    exports2.NullTreeDirEntry = NullTreeDirEntry;
    var NullTree = class _NullTree {
      [interface_1.TreeSymbol]() {
        return this;
      }
      branch() {
        return new _NullTree();
      }
      merge(_other, _strategy) {
      }
      root = new NullTreeDirEntry((0, core_1.normalize)("/"));
      // Simple readonly file system operations.
      exists(_path) {
        return false;
      }
      read(_path) {
        return null;
      }
      readText(path) {
        throw new exception_1.FileDoesNotExistException(path);
      }
      readJson(path) {
        throw new exception_1.FileDoesNotExistException(path);
      }
      get(_path) {
        return null;
      }
      getDir(path) {
        return new NullTreeDirEntry((0, core_1.normalize)("/" + path));
      }
      visit() {
      }
      // Change content of host files.
      beginUpdate(path) {
        throw new exception_1.FileDoesNotExistException(path);
      }
      commitUpdate(record) {
        throw new exception_1.FileDoesNotExistException(record instanceof recorder_1.UpdateRecorderBase ? record.path : "<unknown>");
      }
      // Change structure of the host.
      copy(path, _to) {
        throw new exception_1.FileDoesNotExistException(path);
      }
      delete(path) {
        throw new exception_1.FileDoesNotExistException(path);
      }
      create(path, _content) {
        throw new CannotCreateFileException(path);
      }
      rename(path, _to) {
        throw new exception_1.FileDoesNotExistException(path);
      }
      overwrite(path, _content) {
        throw new exception_1.FileDoesNotExistException(path);
      }
      apply(_action, _strategy) {
      }
      get actions() {
        return [];
      }
    };
    exports2.NullTree = NullTree;
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/rules/call.js
var require_call = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/rules/call.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InvalidSourceResultException = exports2.InvalidRuleResultException = void 0;
    exports2.callSource = callSource;
    exports2.callRule = callRule;
    var core_1 = require_src();
    var rxjs_1 = require("rxjs");
    var interface_1 = require_interface3();
    function _getTypeOfResult(value) {
      if (value === void 0) {
        return "undefined";
      } else if (value === null) {
        return "null";
      } else if (typeof value == "function") {
        return `Function()`;
      } else if (typeof value != "object") {
        return `${typeof value}(${JSON.stringify(value)})`;
      } else {
        if (Object.getPrototypeOf(value) == Object) {
          return `Object(${JSON.stringify(value)})`;
        } else if (value.constructor) {
          return `Instance of class ${value.constructor.name}`;
        } else {
          return "Unknown Object";
        }
      }
    }
    var InvalidRuleResultException = class extends core_1.BaseException {
      constructor(value) {
        super(`Invalid rule result: ${_getTypeOfResult(value)}.`);
      }
    };
    exports2.InvalidRuleResultException = InvalidRuleResultException;
    var InvalidSourceResultException = class extends core_1.BaseException {
      constructor(value) {
        super(`Invalid source result: ${_getTypeOfResult(value)}.`);
      }
    };
    exports2.InvalidSourceResultException = InvalidSourceResultException;
    function callSource(source, context) {
      return (0, rxjs_1.defer)(async () => {
        let result = source(context);
        if ((0, rxjs_1.isObservable)(result)) {
          result = await (0, rxjs_1.lastValueFrom)(result.pipe((0, rxjs_1.defaultIfEmpty)(void 0)));
        }
        if (result && interface_1.TreeSymbol in result) {
          return result;
        }
        throw new InvalidSourceResultException(result);
      });
    }
    function callRule(rule, input, context) {
      if ((0, rxjs_1.isObservable)(input)) {
        return input.pipe((0, rxjs_1.mergeMap)((inputTree) => callRuleAsync(rule, inputTree, context)));
      } else {
        return (0, rxjs_1.defer)(() => callRuleAsync(rule, input, context));
      }
    }
    async function callRuleAsync(rule, tree, context) {
      let result = await rule(tree, context);
      while (typeof result === "function") {
        result = await result(tree, context);
      }
      if (typeof result === "undefined") {
        return tree;
      }
      if ((0, rxjs_1.isObservable)(result)) {
        result = await (0, rxjs_1.lastValueFrom)(result.pipe((0, rxjs_1.defaultIfEmpty)(tree)));
      }
      if (result && interface_1.TreeSymbol in result) {
        return result;
      }
      throw new InvalidRuleResultException(result);
    }
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/engine/schematic.js
var require_schematic = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/engine/schematic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SchematicImpl = exports2.InvalidSchematicsNameException = void 0;
    var core_1 = require_src();
    var rxjs_1 = require("rxjs");
    var call_1 = require_call();
    var scoped_1 = require_scoped2();
    var InvalidSchematicsNameException = class extends core_1.BaseException {
      constructor(name) {
        super(`Schematics has invalid name: "${name}".`);
      }
    };
    exports2.InvalidSchematicsNameException = InvalidSchematicsNameException;
    var SchematicImpl = class {
      _description;
      _factory;
      _collection;
      _engine;
      constructor(_description, _factory, _collection, _engine) {
        this._description = _description;
        this._factory = _factory;
        this._collection = _collection;
        this._engine = _engine;
        if (!_description.name.match(/^[-@/_.a-zA-Z0-9]+$/)) {
          throw new InvalidSchematicsNameException(_description.name);
        }
      }
      get description() {
        return this._description;
      }
      get collection() {
        return this._collection;
      }
      call(options, host, parentContext, executionOptions) {
        const context = this._engine.createContext(this, parentContext, executionOptions);
        return host.pipe((0, rxjs_1.first)(), (0, rxjs_1.concatMap)((tree) => this._engine.transformOptions(this, options, context).pipe((0, rxjs_1.map)((o) => [tree, o]))), (0, rxjs_1.concatMap)(([tree, transformedOptions]) => {
          let input;
          let scoped = false;
          if (executionOptions && executionOptions.scope) {
            scoped = true;
            input = new scoped_1.ScopedTree(tree, executionOptions.scope);
          } else {
            input = tree;
          }
          return (0, call_1.callRule)(this._factory(transformedOptions), input, context).pipe((0, rxjs_1.map)((output) => {
            if (output === input) {
              return tree;
            } else if (scoped) {
              tree.merge(output);
              return tree;
            } else {
              return output;
            }
          }));
        }));
      }
    };
    exports2.SchematicImpl = SchematicImpl;
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/engine/engine.js
var require_engine = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/engine/engine.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SchematicEngine = exports2.TaskScheduler = exports2.CollectionImpl = exports2.UnknownTaskDependencyException = exports2.UnregisteredTaskException = exports2.SchematicEngineConflictingException = exports2.PrivateSchematicException = exports2.UnknownSchematicException = exports2.CircularCollectionException = exports2.UnknownCollectionException = exports2.UnknownUrlSourceProtocol = void 0;
    var core_1 = require_src();
    var rxjs_1 = require("rxjs");
    var interface_1 = require_interface3();
    var null_1 = require_null();
    var static_1 = require_static();
    var schematic_1 = require_schematic();
    var UnknownUrlSourceProtocol = class extends core_1.BaseException {
      constructor(url3) {
        super(`Unknown Protocol on url "${url3}".`);
      }
    };
    exports2.UnknownUrlSourceProtocol = UnknownUrlSourceProtocol;
    var UnknownCollectionException = class extends core_1.BaseException {
      constructor(name) {
        super(`Unknown collection "${name}".`);
      }
    };
    exports2.UnknownCollectionException = UnknownCollectionException;
    var CircularCollectionException = class extends core_1.BaseException {
      constructor(name) {
        super(`Circular collection reference "${name}".`);
      }
    };
    exports2.CircularCollectionException = CircularCollectionException;
    var UnknownSchematicException = class extends core_1.BaseException {
      constructor(name, collection) {
        super(`Schematic "${name}" not found in collection "${collection.name}".`);
      }
    };
    exports2.UnknownSchematicException = UnknownSchematicException;
    var PrivateSchematicException = class extends core_1.BaseException {
      constructor(name, collection) {
        super(`Schematic "${name}" not found in collection "${collection.name}".`);
      }
    };
    exports2.PrivateSchematicException = PrivateSchematicException;
    var SchematicEngineConflictingException = class extends core_1.BaseException {
      constructor() {
        super(`A schematic was called from a different engine as its parent.`);
      }
    };
    exports2.SchematicEngineConflictingException = SchematicEngineConflictingException;
    var UnregisteredTaskException = class extends core_1.BaseException {
      constructor(name, schematic) {
        const addendum = schematic ? ` in schematic "${schematic.name}"` : "";
        super(`Unregistered task "${name}"${addendum}.`);
      }
    };
    exports2.UnregisteredTaskException = UnregisteredTaskException;
    var UnknownTaskDependencyException = class extends core_1.BaseException {
      constructor(id) {
        super(`Unknown task dependency [ID: ${id.id}].`);
      }
    };
    exports2.UnknownTaskDependencyException = UnknownTaskDependencyException;
    var CollectionImpl = class {
      _description;
      _engine;
      baseDescriptions;
      constructor(_description, _engine, baseDescriptions) {
        this._description = _description;
        this._engine = _engine;
        this.baseDescriptions = baseDescriptions;
      }
      get description() {
        return this._description;
      }
      get name() {
        return this.description.name || "<unknown>";
      }
      createSchematic(name, allowPrivate = false) {
        return this._engine.createSchematic(name, this, allowPrivate);
      }
      listSchematicNames(includeHidden) {
        return this._engine.listSchematicNames(this, includeHidden);
      }
    };
    exports2.CollectionImpl = CollectionImpl;
    var TaskScheduler = class _TaskScheduler {
      _context;
      _queue = new core_1.PriorityQueue((x, y) => x.priority - y.priority);
      _taskIds = /* @__PURE__ */ new Map();
      static _taskIdCounter = 1;
      constructor(_context) {
        this._context = _context;
      }
      _calculatePriority(dependencies) {
        if (dependencies.size === 0) {
          return 0;
        }
        const prio = [...dependencies].reduce((prio2, task) => prio2 + task.priority, 1);
        return prio;
      }
      _mapDependencies(dependencies) {
        if (!dependencies) {
          return /* @__PURE__ */ new Set();
        }
        const tasks = dependencies.map((dep) => {
          const task = this._taskIds.get(dep);
          if (!task) {
            throw new UnknownTaskDependencyException(dep);
          }
          return task;
        });
        return new Set(tasks);
      }
      schedule(taskConfiguration) {
        const dependencies = this._mapDependencies(taskConfiguration.dependencies);
        const priority = this._calculatePriority(dependencies);
        const task = {
          id: _TaskScheduler._taskIdCounter++,
          priority,
          configuration: taskConfiguration,
          context: this._context
        };
        this._queue.push(task);
        const id = { id: task.id };
        this._taskIds.set(id, task);
        return id;
      }
      finalize() {
        const tasks = this._queue.toArray();
        this._queue.clear();
        this._taskIds.clear();
        return tasks;
      }
    };
    exports2.TaskScheduler = TaskScheduler;
    var SchematicEngine = class {
      _host;
      _workflow;
      _collectionCache = /* @__PURE__ */ new Map();
      _schematicCache = /* @__PURE__ */ new WeakMap();
      _taskSchedulers = new Array();
      constructor(_host, _workflow) {
        this._host = _host;
        this._workflow = _workflow;
      }
      get workflow() {
        return this._workflow || null;
      }
      get defaultMergeStrategy() {
        return this._host.defaultMergeStrategy || interface_1.MergeStrategy.Default;
      }
      createCollection(name, requester) {
        let collection = this._collectionCache.get(name);
        if (collection) {
          return collection;
        }
        const [description, bases] = this._createCollectionDescription(name, requester?.description);
        collection = new CollectionImpl(description, this, bases);
        this._collectionCache.set(name, collection);
        this._schematicCache.set(collection, /* @__PURE__ */ new Map());
        return collection;
      }
      _createCollectionDescription(name, requester, parentNames) {
        const description = this._host.createCollectionDescription(name, requester);
        if (!description) {
          throw new UnknownCollectionException(name);
        }
        if (parentNames && parentNames.has(description.name)) {
          throw new CircularCollectionException(name);
        }
        const bases = new Array();
        if (description.extends) {
          parentNames = (parentNames || /* @__PURE__ */ new Set()).add(description.name);
          for (const baseName of description.extends) {
            const [base, baseBases] = this._createCollectionDescription(baseName, description, new Set(parentNames));
            bases.unshift(base, ...baseBases);
          }
        }
        return [description, bases];
      }
      createContext(schematic, parent, executionOptions) {
        if (parent && parent.engine && parent.engine !== this) {
          throw new SchematicEngineConflictingException();
        }
        let interactive = true;
        if (executionOptions && executionOptions.interactive != void 0) {
          interactive = executionOptions.interactive;
        } else if (parent && parent.interactive != void 0) {
          interactive = parent.interactive;
        }
        let context = {
          debug: parent && parent.debug || false,
          engine: this,
          logger: parent && parent.logger && parent.logger.createChild(schematic.description.name) || new core_1.logging.NullLogger(),
          schematic,
          strategy: parent && parent.strategy !== void 0 ? parent.strategy : this.defaultMergeStrategy,
          interactive,
          addTask
        };
        const maybeNewContext = this._host.transformContext(context);
        if (maybeNewContext) {
          context = maybeNewContext;
        }
        const taskScheduler = new TaskScheduler(context);
        const host = this._host;
        this._taskSchedulers.push(taskScheduler);
        function addTask(task, dependencies) {
          const config = task.toConfiguration();
          if (!host.hasTaskExecutor(config.name)) {
            throw new UnregisteredTaskException(config.name, schematic.description);
          }
          config.dependencies = config.dependencies || [];
          if (dependencies) {
            config.dependencies.unshift(...dependencies);
          }
          return taskScheduler.schedule(config);
        }
        return context;
      }
      createSchematic(name, collection, allowPrivate = false) {
        const schematicMap = this._schematicCache.get(collection);
        let schematic = schematicMap?.get(name);
        if (schematic) {
          return schematic;
        }
        let collectionDescription = collection.description;
        let description = this._host.createSchematicDescription(name, collection.description);
        if (!description) {
          if (collection.baseDescriptions) {
            for (const base of collection.baseDescriptions) {
              description = this._host.createSchematicDescription(name, base);
              if (description) {
                collectionDescription = base;
                break;
              }
            }
          }
          if (!description) {
            throw new UnknownSchematicException(name, collection.description);
          }
        }
        if (description.private && !allowPrivate) {
          throw new PrivateSchematicException(name, collection.description);
        }
        const factory = this._host.getSchematicRuleFactory(description, collectionDescription);
        schematic = new schematic_1.SchematicImpl(description, factory, collection, this);
        schematicMap?.set(name, schematic);
        return schematic;
      }
      listSchematicNames(collection, includeHidden) {
        const names = this._host.listSchematicNames(collection.description, includeHidden);
        if (collection.baseDescriptions) {
          for (const base of collection.baseDescriptions) {
            names.push(...this._host.listSchematicNames(base, includeHidden));
          }
        }
        return [...new Set(names)].sort();
      }
      transformOptions(schematic, options, context) {
        return this._host.transformOptions(schematic.description, options, context);
      }
      createSourceFromUrl(url3, context) {
        switch (url3.protocol) {
          case "null:":
            return () => new null_1.NullTree();
          case "empty:":
            return () => (0, static_1.empty)();
        }
        const hostSource = this._host.createSourceFromUrl(url3, context);
        if (!hostSource) {
          throw new UnknownUrlSourceProtocol(url3.toString());
        }
        return hostSource;
      }
      executePostTasks() {
        const executors = /* @__PURE__ */ new Map();
        const taskObservable = (0, rxjs_1.from)(this._taskSchedulers).pipe((0, rxjs_1.concatMap)((scheduler) => scheduler.finalize()), (0, rxjs_1.concatMap)((task) => {
          const { name, options } = task.configuration;
          const executor = executors.get(name);
          if (executor) {
            return executor(options, task.context);
          }
          return this._host.createTaskExecutor(name).pipe((0, rxjs_1.concatMap)((executor2) => {
            executors.set(name, executor2);
            return executor2(options, task.context);
          }));
        }));
        return taskObservable;
      }
    };
    exports2.SchematicEngine = SchematicEngine;
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/engine/interface.js
var require_interface4 = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/engine/interface.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/engine/index.js
var require_engine2 = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/engine/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_engine(), exports2);
    __exportStar(require_interface4(), exports2);
    __exportStar(require_schematic(), exports2);
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/node/cli-logger.js
var require_cli_logger = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/node/cli-logger.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createConsoleLogger = createConsoleLogger;
    var rxjs_1 = require("rxjs");
    var src_1 = require_src();
    function createConsoleLogger(verbose = false, stdout = process.stdout, stderr = process.stderr, colors) {
      const logger = new src_1.logging.IndentLogger("cling");
      logger.pipe((0, rxjs_1.filter)((entry) => entry.level !== "debug" || verbose)).subscribe((entry) => {
        const color = colors && colors[entry.level];
        let output = stdout;
        switch (entry.level) {
          case "warn":
          case "fatal":
          case "error":
            output = stderr;
            break;
        }
        const chunkSize = 2e3;
        let message = entry.message;
        while (message) {
          const chunk = message.slice(0, chunkSize);
          message = message.slice(chunkSize);
          output.write(color ? color(chunk) : chunk);
        }
        output.write("\n");
      });
      return logger;
    }
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/node/host.js
var require_host3 = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/node/host.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NodeJsSyncHost = exports2.NodeJsAsyncHost = void 0;
    var node_fs_1 = require("node:fs");
    var node_path_1 = require("node:path");
    var rxjs_1 = require("rxjs");
    var src_1 = require_src();
    async function exists(path) {
      try {
        await node_fs_1.promises.access(path, node_fs_1.constants.F_OK);
        return true;
      } catch {
        return false;
      }
    }
    var FSWatcher;
    function loadFSWatcher() {
      if (!FSWatcher) {
        try {
          FSWatcher = require("chokidar").FSWatcher;
        } catch (e) {
          if (e.code !== "MODULE_NOT_FOUND") {
            throw new Error('As of angular-devkit version 8.0, the "chokidar" package must be installed in order to use watch() features.');
          }
          throw e;
        }
      }
    }
    var NodeJsAsyncHost = class {
      get capabilities() {
        return { synchronous: false };
      }
      write(path, content) {
        return (0, rxjs_1.from)(node_fs_1.promises.mkdir((0, src_1.getSystemPath)((0, src_1.dirname)(path)), { recursive: true })).pipe((0, rxjs_1.mergeMap)(() => node_fs_1.promises.writeFile((0, src_1.getSystemPath)(path), new Uint8Array(content))));
      }
      read(path) {
        return (0, rxjs_1.from)(node_fs_1.promises.readFile((0, src_1.getSystemPath)(path))).pipe((0, rxjs_1.map)((buffer) => new Uint8Array(buffer).buffer));
      }
      delete(path) {
        return (0, rxjs_1.from)(node_fs_1.promises.rm((0, src_1.getSystemPath)(path), { force: true, recursive: true, maxRetries: 3 }));
      }
      rename(from, to) {
        return (0, rxjs_1.from)(node_fs_1.promises.rename((0, src_1.getSystemPath)(from), (0, src_1.getSystemPath)(to)));
      }
      list(path) {
        return (0, rxjs_1.from)(node_fs_1.promises.readdir((0, src_1.getSystemPath)(path))).pipe((0, rxjs_1.map)((names) => names.map((name) => (0, src_1.fragment)(name))));
      }
      exists(path) {
        return (0, rxjs_1.from)(exists((0, src_1.getSystemPath)(path)));
      }
      isDirectory(path) {
        return this.stat(path).pipe((0, rxjs_1.map)((stat) => stat.isDirectory()));
      }
      isFile(path) {
        return this.stat(path).pipe((0, rxjs_1.map)((stat) => stat.isFile()));
      }
      // Some hosts may not support stat.
      stat(path) {
        return (0, rxjs_1.from)(node_fs_1.promises.stat((0, src_1.getSystemPath)(path)));
      }
      // Some hosts may not support watching.
      watch(path, _options) {
        return new rxjs_1.Observable((obs) => {
          loadFSWatcher();
          const watcher = new FSWatcher({ persistent: true });
          watcher.add((0, src_1.getSystemPath)(path));
          watcher.on("change", (path2) => {
            obs.next({
              path: (0, src_1.normalize)(path2),
              time: /* @__PURE__ */ new Date(),
              type: src_1.virtualFs.HostWatchEventType.Changed
            });
          }).on("add", (path2) => {
            obs.next({
              path: (0, src_1.normalize)(path2),
              time: /* @__PURE__ */ new Date(),
              type: src_1.virtualFs.HostWatchEventType.Created
            });
          }).on("unlink", (path2) => {
            obs.next({
              path: (0, src_1.normalize)(path2),
              time: /* @__PURE__ */ new Date(),
              type: src_1.virtualFs.HostWatchEventType.Deleted
            });
          });
          return () => {
            void watcher.close();
          };
        }).pipe((0, rxjs_1.publish)(), (0, rxjs_1.refCount)());
      }
    };
    exports2.NodeJsAsyncHost = NodeJsAsyncHost;
    var NodeJsSyncHost = class {
      get capabilities() {
        return { synchronous: true };
      }
      write(path, content) {
        return new rxjs_1.Observable((obs) => {
          (0, node_fs_1.mkdirSync)((0, src_1.getSystemPath)((0, src_1.dirname)(path)), { recursive: true });
          (0, node_fs_1.writeFileSync)((0, src_1.getSystemPath)(path), new Uint8Array(content));
          obs.next();
          obs.complete();
        });
      }
      read(path) {
        return new rxjs_1.Observable((obs) => {
          const buffer = (0, node_fs_1.readFileSync)((0, src_1.getSystemPath)(path));
          obs.next(new Uint8Array(buffer).buffer);
          obs.complete();
        });
      }
      delete(path) {
        return new rxjs_1.Observable((obs) => {
          (0, node_fs_1.rmSync)((0, src_1.getSystemPath)(path), { force: true, recursive: true, maxRetries: 3 });
          obs.complete();
        });
      }
      rename(from, to) {
        return new rxjs_1.Observable((obs) => {
          const toSystemPath = (0, src_1.getSystemPath)(to);
          (0, node_fs_1.mkdirSync)((0, node_path_1.dirname)(toSystemPath), { recursive: true });
          (0, node_fs_1.renameSync)((0, src_1.getSystemPath)(from), toSystemPath);
          obs.next();
          obs.complete();
        });
      }
      list(path) {
        return new rxjs_1.Observable((obs) => {
          const names = (0, node_fs_1.readdirSync)((0, src_1.getSystemPath)(path));
          obs.next(names.map((name) => (0, src_1.fragment)(name)));
          obs.complete();
        });
      }
      exists(path) {
        return new rxjs_1.Observable((obs) => {
          obs.next((0, node_fs_1.existsSync)((0, src_1.getSystemPath)(path)));
          obs.complete();
        });
      }
      isDirectory(path) {
        return this.stat(path).pipe((0, rxjs_1.map)((stat) => stat.isDirectory()));
      }
      isFile(path) {
        return this.stat(path).pipe((0, rxjs_1.map)((stat) => stat.isFile()));
      }
      // Some hosts may not support stat.
      stat(path) {
        return new rxjs_1.Observable((obs) => {
          obs.next((0, node_fs_1.statSync)((0, src_1.getSystemPath)(path)));
          obs.complete();
        });
      }
      // Some hosts may not support watching.
      watch(path, _options) {
        return new rxjs_1.Observable((obs) => {
          loadFSWatcher();
          const watcher = new FSWatcher({ persistent: false });
          watcher.add((0, src_1.getSystemPath)(path));
          watcher.on("change", (path2) => {
            obs.next({
              path: (0, src_1.normalize)(path2),
              time: /* @__PURE__ */ new Date(),
              type: src_1.virtualFs.HostWatchEventType.Changed
            });
          }).on("add", (path2) => {
            obs.next({
              path: (0, src_1.normalize)(path2),
              time: /* @__PURE__ */ new Date(),
              type: src_1.virtualFs.HostWatchEventType.Created
            });
          }).on("unlink", (path2) => {
            obs.next({
              path: (0, src_1.normalize)(path2),
              time: /* @__PURE__ */ new Date(),
              type: src_1.virtualFs.HostWatchEventType.Deleted
            });
          });
          return () => {
            void watcher.close();
          };
        }).pipe((0, rxjs_1.publish)(), (0, rxjs_1.refCount)());
      }
    };
    exports2.NodeJsSyncHost = NodeJsSyncHost;
  }
});

// ../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/node/index.js
var require_node = __commonJS({
  "../../.yarn/__virtual__/@angular-devkit-core-virtual-c96c6e9009/0/cache/@angular-devkit-core-npm-19.1.5-8cadb3875f-7d81fd1047.zip/node_modules/@angular-devkit/core/node/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_cli_logger(), exports2);
    __exportStar(require_host3(), exports2);
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/tree/action.js
var require_action = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/tree/action.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ActionList = exports2.UnknownActionException = void 0;
    exports2.isContentAction = isContentAction;
    var core_1 = require_src();
    var UnknownActionException = class extends core_1.BaseException {
      constructor(action) {
        super(`Unknown action: "${action.kind}".`);
      }
    };
    exports2.UnknownActionException = UnknownActionException;
    var _id = 1;
    var ActionList = class {
      _actions = [];
      _action(action) {
        this._actions.push({
          ...action,
          id: _id++,
          parent: this._actions[this._actions.length - 1]?.id ?? 0
        });
      }
      create(path, content) {
        this._action({ kind: "c", path, content });
      }
      overwrite(path, content) {
        this._action({ kind: "o", path, content });
      }
      rename(path, to) {
        this._action({ kind: "r", path, to });
      }
      delete(path) {
        this._action({ kind: "d", path });
      }
      optimize() {
        const toCreate = /* @__PURE__ */ new Map();
        const toRename = /* @__PURE__ */ new Map();
        const toOverwrite = /* @__PURE__ */ new Map();
        const toDelete = /* @__PURE__ */ new Set();
        for (const action of this._actions) {
          switch (action.kind) {
            case "c":
              toCreate.set(action.path, action.content);
              break;
            case "o":
              if (toCreate.has(action.path)) {
                toCreate.set(action.path, action.content);
              } else {
                toOverwrite.set(action.path, action.content);
              }
              break;
            case "d":
              toDelete.add(action.path);
              break;
            case "r": {
              const maybeCreate = toCreate.get(action.path);
              const maybeOverwrite = toOverwrite.get(action.path);
              if (maybeCreate) {
                toCreate.delete(action.path);
                toCreate.set(action.to, maybeCreate);
              }
              if (maybeOverwrite) {
                toOverwrite.delete(action.path);
                toOverwrite.set(action.to, maybeOverwrite);
              }
              let maybeRename = void 0;
              for (const [from, to] of toRename.entries()) {
                if (to == action.path) {
                  maybeRename = from;
                  break;
                }
              }
              if (maybeRename) {
                toRename.set(maybeRename, action.to);
              }
              if (!maybeCreate && !maybeOverwrite && !maybeRename) {
                toRename.set(action.path, action.to);
              }
              break;
            }
          }
        }
        this._actions = [];
        toDelete.forEach((x) => {
          this.delete(x);
        });
        toRename.forEach((to, from) => {
          this.rename(from, to);
        });
        toCreate.forEach((content, path) => {
          this.create(path, content);
        });
        toOverwrite.forEach((content, path) => {
          this.overwrite(path, content);
        });
      }
      push(action) {
        this._actions.push(action);
      }
      get(i) {
        return this._actions[i];
      }
      has(action) {
        for (let i = 0; i < this._actions.length; i++) {
          const a = this._actions[i];
          if (a.id == action.id) {
            return true;
          }
          if (a.id > action.id) {
            return false;
          }
        }
        return false;
      }
      find(predicate) {
        return this._actions.find(predicate) || null;
      }
      forEach(fn, thisArg) {
        this._actions.forEach(fn, thisArg);
      }
      get length() {
        return this._actions.length;
      }
      [Symbol.iterator]() {
        return this._actions[Symbol.iterator]();
      }
    };
    exports2.ActionList = ActionList;
    function isContentAction(action) {
      return action.kind == "c" || action.kind == "o";
    }
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/sink/sink.js
var require_sink = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/sink/sink.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SimpleSinkBase = void 0;
    var rxjs_1 = require("rxjs");
    var exception_1 = require_exception2();
    var action_1 = require_action();
    var Noop = function() {
    };
    var SimpleSinkBase = class {
      preCommitAction = Noop;
      postCommitAction = Noop;
      preCommit = Noop;
      postCommit = Noop;
      _fileAlreadyExistException(path) {
        throw new exception_1.FileAlreadyExistException(path);
      }
      _fileDoesNotExistException(path) {
        throw new exception_1.FileDoesNotExistException(path);
      }
      _validateOverwriteAction(action) {
        return this._validateFileExists(action.path).pipe((0, rxjs_1.map)((b) => {
          if (!b) {
            this._fileDoesNotExistException(action.path);
          }
        }));
      }
      _validateCreateAction(action) {
        return this._validateFileExists(action.path).pipe((0, rxjs_1.map)((b) => {
          if (b) {
            this._fileAlreadyExistException(action.path);
          }
        }));
      }
      _validateRenameAction(action) {
        return this._validateFileExists(action.path).pipe((0, rxjs_1.map)((b) => {
          if (!b) {
            this._fileDoesNotExistException(action.path);
          }
        }), (0, rxjs_1.mergeMap)(() => this._validateFileExists(action.to)), (0, rxjs_1.map)((b) => {
          if (b) {
            this._fileAlreadyExistException(action.to);
          }
        }));
      }
      _validateDeleteAction(action) {
        return this._validateFileExists(action.path).pipe((0, rxjs_1.map)((b) => {
          if (!b) {
            this._fileDoesNotExistException(action.path);
          }
        }));
      }
      validateSingleAction(action) {
        switch (action.kind) {
          case "o":
            return this._validateOverwriteAction(action);
          case "c":
            return this._validateCreateAction(action);
          case "r":
            return this._validateRenameAction(action);
          case "d":
            return this._validateDeleteAction(action);
          default:
            throw new action_1.UnknownActionException(action);
        }
      }
      commitSingleAction(action) {
        return (0, rxjs_1.concat)(this.validateSingleAction(action), new rxjs_1.Observable((observer) => {
          let committed = null;
          switch (action.kind) {
            case "o":
              committed = this._overwriteFile(action.path, action.content);
              break;
            case "c":
              committed = this._createFile(action.path, action.content);
              break;
            case "r":
              committed = this._renameFile(action.path, action.to);
              break;
            case "d":
              committed = this._deleteFile(action.path);
              break;
          }
          if (committed) {
            committed.subscribe(observer);
          } else {
            observer.complete();
          }
        })).pipe((0, rxjs_1.ignoreElements)());
      }
      commit(tree) {
        const actions = (0, rxjs_1.from)(tree.actions);
        return (0, rxjs_1.concat)(this.preCommit() || (0, rxjs_1.of)(null), (0, rxjs_1.defer)(() => actions).pipe((0, rxjs_1.concatMap)((action) => {
          const maybeAction = this.preCommitAction(action);
          if ((0, rxjs_1.isObservable)(maybeAction) || isPromiseLike(maybeAction)) {
            return maybeAction;
          }
          return (0, rxjs_1.of)(maybeAction || action);
        }), (0, rxjs_1.concatMap)((action) => {
          return (0, rxjs_1.concat)(this.commitSingleAction(action).pipe((0, rxjs_1.ignoreElements)()), (0, rxjs_1.of)(action));
        }), (0, rxjs_1.concatMap)((action) => this.postCommitAction(action) || (0, rxjs_1.of)(null))), (0, rxjs_1.defer)(() => this._done()), (0, rxjs_1.defer)(() => this.postCommit() || (0, rxjs_1.of)(null))).pipe((0, rxjs_1.ignoreElements)(), (0, rxjs_1.defaultIfEmpty)(void 0));
      }
    };
    exports2.SimpleSinkBase = SimpleSinkBase;
    function isPromiseLike(value) {
      return !!value && typeof value.then === "function";
    }
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/sink/host.js
var require_host4 = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/sink/host.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HostSink = void 0;
    var rxjs_1 = require("rxjs");
    var sink_1 = require_sink();
    var HostSink = class extends sink_1.SimpleSinkBase {
      _host;
      _force;
      _filesToDelete = /* @__PURE__ */ new Set();
      _filesToRename = /* @__PURE__ */ new Set();
      _filesToCreate = /* @__PURE__ */ new Map();
      _filesToUpdate = /* @__PURE__ */ new Map();
      constructor(_host, _force = false) {
        super();
        this._host = _host;
        this._force = _force;
      }
      _validateCreateAction(action) {
        return this._force ? rxjs_1.EMPTY : super._validateCreateAction(action);
      }
      _validateFileExists(p) {
        if (this._filesToCreate.has(p) || this._filesToUpdate.has(p)) {
          return (0, rxjs_1.of)(true);
        }
        if (this._filesToDelete.has(p)) {
          return (0, rxjs_1.of)(false);
        }
        for (const [from, to] of this._filesToRename.values()) {
          switch (p) {
            case from:
              return (0, rxjs_1.of)(false);
            case to:
              return (0, rxjs_1.of)(true);
          }
        }
        return this._host.exists(p);
      }
      _overwriteFile(path, content) {
        this._filesToUpdate.set(path, content);
        return rxjs_1.EMPTY;
      }
      _createFile(path, content) {
        this._filesToCreate.set(path, content);
        return rxjs_1.EMPTY;
      }
      _renameFile(from, to) {
        this._filesToRename.add([from, to]);
        return rxjs_1.EMPTY;
      }
      _deleteFile(path) {
        if (this._filesToCreate.has(path)) {
          this._filesToCreate.delete(path);
          this._filesToUpdate.delete(path);
        } else {
          this._filesToDelete.add(path);
        }
        return rxjs_1.EMPTY;
      }
      _done() {
        return (0, rxjs_1.concat)((0, rxjs_1.from)([...this._filesToDelete.values()]).pipe((0, rxjs_1.concatMap)((path) => this._host.delete(path))), (0, rxjs_1.from)([...this._filesToRename.entries()]).pipe((0, rxjs_1.concatMap)(([_, [path, to]]) => this._host.rename(path, to))), (0, rxjs_1.from)([...this._filesToCreate.entries()]).pipe((0, rxjs_1.concatMap)(([path, buffer]) => this._host.write(path, buffer))), (0, rxjs_1.from)([...this._filesToUpdate.entries()]).pipe((0, rxjs_1.concatMap)(([path, buffer]) => this._host.write(path, buffer)))).pipe((0, rxjs_1.reduce)(() => {
        }));
      }
    };
    exports2.HostSink = HostSink;
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/sink/dryrun.js
var require_dryrun = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/sink/dryrun.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DryRunSink = void 0;
    var core_1 = require_src();
    var node_1 = require_node();
    var rxjs_1 = require("rxjs");
    var host_1 = require_host4();
    var DryRunSink = class extends host_1.HostSink {
      _subject = new rxjs_1.Subject();
      _fileDoesNotExistExceptionSet = /* @__PURE__ */ new Set();
      _fileAlreadyExistExceptionSet = /* @__PURE__ */ new Set();
      reporter = this._subject.asObservable();
      constructor(host, force = false) {
        super(typeof host == "string" ? new core_1.virtualFs.ScopedHost(new node_1.NodeJsSyncHost(), (0, core_1.normalize)(host)) : host, force);
      }
      _fileAlreadyExistException(path) {
        this._fileAlreadyExistExceptionSet.add(path);
      }
      _fileDoesNotExistException(path) {
        this._fileDoesNotExistExceptionSet.add(path);
      }
      _done() {
        this._fileAlreadyExistExceptionSet.forEach((path) => {
          this._subject.next({
            kind: "error",
            description: "alreadyExist",
            path
          });
        });
        this._fileDoesNotExistExceptionSet.forEach((path) => {
          this._subject.next({
            kind: "error",
            description: "doesNotExist",
            path
          });
        });
        this._filesToDelete.forEach((path) => {
          for (const [from] of this._filesToRename) {
            if (from == path) {
              return;
            }
          }
          this._subject.next({ kind: "delete", path });
        });
        this._filesToRename.forEach(([path, to]) => {
          this._subject.next({ kind: "rename", path, to });
        });
        this._filesToCreate.forEach((content, path) => {
          for (const [, to] of this._filesToRename) {
            if (to == path) {
              return;
            }
          }
          if (this._fileAlreadyExistExceptionSet.has(path) || this._fileDoesNotExistExceptionSet.has(path)) {
            return;
          }
          this._subject.next({ kind: "create", path, content });
        });
        this._filesToUpdate.forEach((content, path) => {
          this._subject.next({ kind: "update", path, content });
        });
        this._subject.complete();
        return (0, rxjs_1.of)(void 0);
      }
    };
    exports2.DryRunSink = DryRunSink;
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/workflow/base.js
var require_base = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/workflow/base.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BaseWorkflow = void 0;
    var core_1 = require_src();
    var rxjs_1 = require("rxjs");
    var engine_1 = require_engine2();
    var exception_1 = require_exception2();
    var formats_1 = require_formats();
    var dryrun_1 = require_dryrun();
    var host_1 = require_host4();
    var host_tree_1 = require_host_tree();
    var BaseWorkflow = class {
      _engine;
      _engineHost;
      _registry;
      _host;
      _reporter = new rxjs_1.Subject();
      _lifeCycle = new rxjs_1.Subject();
      _context;
      _force;
      _dryRun;
      constructor(options) {
        this._host = options.host;
        this._engineHost = options.engineHost;
        if (options.registry) {
          this._registry = options.registry;
        } else {
          this._registry = new core_1.schema.CoreSchemaRegistry(formats_1.standardFormats);
          this._registry.addPostTransform(core_1.schema.transforms.addUndefinedDefaults);
        }
        this._engine = new engine_1.SchematicEngine(this._engineHost, this);
        this._context = [];
        this._force = options.force || false;
        this._dryRun = options.dryRun || false;
      }
      get context() {
        const maybeContext = this._context[this._context.length - 1];
        if (!maybeContext) {
          throw new Error("Cannot get context when workflow is not executing...");
        }
        return maybeContext;
      }
      get engine() {
        return this._engine;
      }
      get engineHost() {
        return this._engineHost;
      }
      get registry() {
        return this._registry;
      }
      get reporter() {
        return this._reporter.asObservable();
      }
      get lifeCycle() {
        return this._lifeCycle.asObservable();
      }
      _createSinks() {
        let error = false;
        const dryRunSink = new dryrun_1.DryRunSink(this._host, this._force);
        const dryRunSubscriber = dryRunSink.reporter.subscribe((event) => {
          this._reporter.next(event);
          error = error || event.kind == "error";
        });
        return [
          dryRunSink,
          // Add a custom sink that clean ourselves and throws an error if an error happened.
          {
            commit() {
              dryRunSubscriber.unsubscribe();
              if (error) {
                return (0, rxjs_1.throwError)(new exception_1.UnsuccessfulWorkflowExecution());
              }
              return (0, rxjs_1.of)();
            }
          },
          // Only add a HostSink if this is not a dryRun.
          ...!this._dryRun ? [new host_1.HostSink(this._host, this._force)] : []
        ];
      }
      execute(options) {
        const parentContext = this._context[this._context.length - 1];
        if (!parentContext) {
          this._lifeCycle.next({ kind: "start" });
        }
        const collection = this._engine.createCollection(options.collection);
        const allowPrivate = options.allowPrivate || parentContext && parentContext.collection === options.collection;
        const schematic = collection.createSchematic(options.schematic, allowPrivate);
        const sinks = this._createSinks();
        this._lifeCycle.next({ kind: "workflow-start" });
        const context = {
          ...options,
          debug: options.debug || false,
          logger: options.logger || parentContext && parentContext.logger || new core_1.logging.NullLogger(),
          parentContext
        };
        this._context.push(context);
        return schematic.call(options.options, (0, rxjs_1.of)(new host_tree_1.HostTree(this._host)), { logger: context.logger }).pipe((0, rxjs_1.concatMap)((tree) => {
          return (0, rxjs_1.concat)((0, rxjs_1.from)(sinks).pipe((0, rxjs_1.concatMap)((sink) => sink.commit(tree)), (0, rxjs_1.ignoreElements)()), (0, rxjs_1.of)(tree));
        }), (0, rxjs_1.concatMap)(() => {
          if (this._dryRun) {
            return rxjs_1.EMPTY;
          }
          this._lifeCycle.next({ kind: "post-tasks-start" });
          return this._engine.executePostTasks().pipe((0, rxjs_1.tap)({ complete: () => this._lifeCycle.next({ kind: "post-tasks-end" }) }), (0, rxjs_1.defaultIfEmpty)(void 0), (0, rxjs_1.last)());
        }), (0, rxjs_1.tap)({
          complete: () => {
            this._lifeCycle.next({ kind: "workflow-end" });
            this._context.pop();
            if (this._context.length == 0) {
              this._lifeCycle.next({ kind: "end" });
            }
          }
        }));
      }
    };
    exports2.BaseWorkflow = BaseWorkflow;
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/workflow/interface.js
var require_interface5 = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/workflow/interface.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/workflow/index.js
var require_workflow = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/workflow/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_base(), exports2);
    __exportStar(require_interface5(), exports2);
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/rules/base.js
var require_base2 = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/rules/base.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.source = source;
    exports2.empty = empty;
    exports2.chain = chain2;
    exports2.apply = apply3;
    exports2.mergeWith = mergeWith2;
    exports2.noop = noop;
    exports2.filter = filter;
    exports2.asSource = asSource;
    exports2.branchAndMerge = branchAndMerge;
    exports2.when = when;
    exports2.partitionApplyMerge = partitionApplyMerge;
    exports2.forEach = forEach;
    exports2.composeFileOperators = composeFileOperators;
    exports2.applyToSubtree = applyToSubtree;
    var rxjs_1 = require("rxjs");
    var exception_1 = require_exception2();
    var host_tree_1 = require_host_tree();
    var interface_1 = require_interface3();
    var scoped_1 = require_scoped2();
    var static_1 = require_static();
    var call_1 = require_call();
    function source(tree) {
      return () => tree;
    }
    function empty() {
      return () => (0, static_1.empty)();
    }
    function chain2(rules) {
      return async (initialTree, context) => {
        let intermediateTree;
        if (Symbol.asyncIterator in rules) {
          for await (const rule of rules) {
            intermediateTree = (0, call_1.callRule)(rule, intermediateTree ?? initialTree, context);
          }
        } else {
          for (const rule of rules) {
            intermediateTree = (0, call_1.callRule)(rule, intermediateTree ?? initialTree, context);
          }
        }
        return () => intermediateTree;
      };
    }
    function apply3(source2, rules) {
      return (context) => (0, call_1.callRule)(chain2(rules), (0, call_1.callSource)(source2, context), context);
    }
    function mergeWith2(source2, strategy = interface_1.MergeStrategy.Default) {
      return (tree, context) => {
        return (0, call_1.callSource)(source2, context).pipe((0, rxjs_1.map)((sourceTree) => tree.merge(sourceTree, strategy || context.strategy)), (0, rxjs_1.mapTo)(tree));
      };
    }
    function noop() {
      return () => {
      };
    }
    function filter(predicate) {
      return (tree) => {
        if (host_tree_1.HostTree.isHostTree(tree)) {
          return new host_tree_1.FilterHostTree(tree, predicate);
        } else {
          throw new exception_1.SchematicsException("Tree type is not supported.");
        }
      };
    }
    function asSource(rule) {
      return (context) => (0, call_1.callRule)(rule, (0, static_1.empty)(), context);
    }
    function branchAndMerge(rule, strategy = interface_1.MergeStrategy.Default) {
      return (tree, context) => {
        return (0, call_1.callRule)(rule, tree.branch(), context).pipe((0, rxjs_1.map)((branch) => tree.merge(branch, strategy || context.strategy)), (0, rxjs_1.mapTo)(tree));
      };
    }
    function when(predicate, operator) {
      return (entry) => {
        if (predicate(entry.path, entry)) {
          return operator(entry);
        } else {
          return entry;
        }
      };
    }
    function partitionApplyMerge(predicate, ruleYes, ruleNo) {
      return (tree, context) => {
        const [yes, no] = (0, static_1.partition)(tree, predicate);
        return (0, rxjs_1.concat)((0, call_1.callRule)(ruleYes, yes, context), (0, call_1.callRule)(ruleNo || noop(), no, context)).pipe((0, rxjs_1.toArray)(), (0, rxjs_1.map)(([yesTree, noTree]) => {
          yesTree.merge(noTree, context.strategy);
          return yesTree;
        }));
      };
    }
    function forEach(operator) {
      return (tree) => {
        tree.visit((path, entry) => {
          if (!entry) {
            return;
          }
          const newEntry = operator(entry);
          if (newEntry === entry) {
            return;
          }
          if (newEntry === null) {
            tree.delete(path);
            return;
          }
          if (newEntry.path != path) {
            tree.rename(path, newEntry.path);
          }
          if (!newEntry.content.equals(entry.content)) {
            tree.overwrite(newEntry.path, newEntry.content);
          }
        });
      };
    }
    function composeFileOperators(operators) {
      return (entry) => {
        let current = entry;
        for (const op of operators) {
          current = op(current);
          if (current === null) {
            return null;
          }
        }
        return current;
      };
    }
    function applyToSubtree(path, rules) {
      return (tree, context) => {
        const scoped = new scoped_1.ScopedTree(tree, path);
        return (0, call_1.callRule)(chain2(rules), scoped, context).pipe((0, rxjs_1.map)((result) => {
          if (result === scoped) {
            return tree;
          } else {
            throw new exception_1.SchematicsException('Original tree must be returned from all rules when using "applyToSubtree".');
          }
        }));
      };
    }
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/rules/move.js
var require_move = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/rules/move.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.move = move3;
    var core_1 = require_src();
    var base_1 = require_base2();
    function move3(from, to) {
      if (to === void 0) {
        to = from;
        from = "/";
      }
      const fromPath = (0, core_1.normalize)("/" + from);
      const toPath = (0, core_1.normalize)("/" + to);
      if (fromPath === toPath) {
        return base_1.noop;
      }
      return (tree) => {
        if (tree.exists(fromPath)) {
          tree.rename(fromPath, toPath);
        } else {
          tree.getDir(fromPath).visit((path) => {
            tree.rename(path, (0, core_1.join)(toPath, path.slice(fromPath.length)));
          });
        }
        return tree;
      };
    }
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/rules/random.js
var require_random = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/rules/random.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.default = default_1;
    var host_tree_1 = require_host_tree();
    function generateStringOfLength(l) {
      return new Array(l).fill(0).map((_x) => {
        return "abcdefghijklmnopqrstuvwxyz"[Math.floor(Math.random() * 26)];
      }).join("");
    }
    function random(from, to) {
      return Math.floor(Math.random() * (to - from)) + from;
    }
    function default_1(options) {
      return () => {
        const root = "root" in options ? options.root : "/";
        const map = new host_tree_1.HostTree();
        const nbFiles = "multiFiles" in options ? typeof options.multiFiles == "number" ? options.multiFiles : random(2, 12) : 1;
        for (let i = 0; i < nbFiles; i++) {
          const path = "a/b/c/d/e/f".slice(Math.random() * 10);
          const fileName = generateStringOfLength(20);
          const content = generateStringOfLength(100);
          map.create(root + "/" + path + "/" + fileName, content);
        }
        return map;
      };
    }
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/rules/schematic.js
var require_schematic2 = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/rules/schematic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.externalSchematic = externalSchematic;
    exports2.schematic = schematic;
    var rxjs_1 = require("rxjs");
    var interface_1 = require_interface3();
    var static_1 = require_static();
    function externalSchematic(collectionName, schematicName, options, executionOptions) {
      return (input, context) => {
        const collection = context.engine.createCollection(collectionName, context.schematic.collection);
        const schematic2 = collection.createSchematic(schematicName);
        return schematic2.call(options, (0, rxjs_1.of)((0, static_1.branch)(input)), context, executionOptions).pipe((0, rxjs_1.last)(), (0, rxjs_1.map)((x) => {
          input.merge(x, interface_1.MergeStrategy.AllowOverwriteConflict);
          return input;
        }));
      };
    }
    function schematic(schematicName, options, executionOptions) {
      return (input, context) => {
        const collection = context.schematic.collection;
        const schematic2 = collection.createSchematic(schematicName, true);
        return schematic2.call(options, (0, rxjs_1.of)((0, static_1.branch)(input)), context, executionOptions).pipe((0, rxjs_1.last)(), (0, rxjs_1.map)((x) => {
          input.merge(x, interface_1.MergeStrategy.AllowOverwriteConflict);
          return input;
        }));
      };
    }
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/rules/template.js
var require_template2 = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/rules/template.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InvalidPipeException = exports2.UnknownPipeException = exports2.OptionIsNotDefinedException = exports2.TEMPLATE_FILENAME_RE = void 0;
    exports2.applyContentTemplate = applyContentTemplate;
    exports2.contentTemplate = contentTemplate;
    exports2.applyPathTemplate = applyPathTemplate;
    exports2.pathTemplate = pathTemplate;
    exports2.renameTemplateFiles = renameTemplateFiles;
    exports2.template = template3;
    exports2.applyTemplates = applyTemplates;
    var core_1 = require_src();
    var node_os_1 = require("node:os");
    var base_1 = require_base2();
    exports2.TEMPLATE_FILENAME_RE = /\.template$/;
    var OptionIsNotDefinedException = class extends core_1.BaseException {
      constructor(name) {
        super(`Option "${name}" is not defined.`);
      }
    };
    exports2.OptionIsNotDefinedException = OptionIsNotDefinedException;
    var UnknownPipeException = class extends core_1.BaseException {
      constructor(name) {
        super(`Pipe "${name}" is not defined.`);
      }
    };
    exports2.UnknownPipeException = UnknownPipeException;
    var InvalidPipeException = class extends core_1.BaseException {
      constructor(name) {
        super(`Pipe "${name}" is invalid.`);
      }
    };
    exports2.InvalidPipeException = InvalidPipeException;
    var decoder = new TextDecoder("utf-8", { fatal: true });
    function applyContentTemplate(options) {
      return (entry) => {
        const { path, content } = entry;
        try {
          const decodedContent = decoder.decode(content).replace(/\r?\n/g, node_os_1.EOL);
          return {
            path,
            content: Buffer.from((0, core_1.template)(decodedContent, {})(options))
          };
        } catch (e) {
          if (e instanceof TypeError || e.code === "ERR_ENCODING_INVALID_ENCODED_DATA") {
            return entry;
          }
          throw e;
        }
      };
    }
    function contentTemplate(options) {
      return (0, base_1.forEach)(applyContentTemplate(options));
    }
    function applyPathTemplate(data, options = {
      interpolationStart: "__",
      interpolationEnd: "__",
      pipeSeparator: "@"
    }) {
      const is = options.interpolationStart;
      const ie = options.interpolationEnd;
      const isL = is.length;
      const ieL = ie.length;
      return (entry) => {
        let path = entry.path;
        const content = entry.content;
        const original = path;
        let start = path.indexOf(is);
        let end = path.indexOf(ie, start + isL + 1);
        while (start != -1 && end != -1) {
          const match = path.substring(start + isL, end);
          let replacement = data[match];
          if (!options.pipeSeparator) {
            if (typeof replacement == "function") {
              replacement = replacement.call(data, original);
            }
            if (replacement === void 0) {
              throw new OptionIsNotDefinedException(match);
            }
          } else {
            const [name, ...pipes] = match.split(options.pipeSeparator);
            replacement = data[name];
            if (typeof replacement == "function") {
              replacement = replacement.call(data, original);
            }
            if (replacement === void 0) {
              throw new OptionIsNotDefinedException(name);
            }
            replacement = pipes.reduce((acc, pipe) => {
              if (!pipe) {
                return acc;
              }
              if (!(pipe in data)) {
                throw new UnknownPipeException(pipe);
              }
              const pipeFn = data[pipe];
              if (typeof pipeFn != "function") {
                throw new InvalidPipeException(pipe);
              }
              return "" + pipeFn(acc);
            }, "" + replacement);
          }
          path = path.substring(0, start) + replacement + path.substring(end + ieL);
          start = path.indexOf(options.interpolationStart);
          end = path.indexOf(options.interpolationEnd, start + isL + 1);
        }
        return { path: (0, core_1.normalize)(path), content };
      };
    }
    function pathTemplate(options) {
      return (0, base_1.forEach)(applyPathTemplate(options));
    }
    function renameTemplateFiles() {
      return (0, base_1.forEach)((entry) => {
        if (entry.path.match(exports2.TEMPLATE_FILENAME_RE)) {
          return {
            content: entry.content,
            path: (0, core_1.normalize)(entry.path.replace(exports2.TEMPLATE_FILENAME_RE, ""))
          };
        } else {
          return entry;
        }
      });
    }
    function template3(options) {
      return (0, base_1.chain)([
        contentTemplate(options),
        // Force cast to PathTemplateData. We need the type for the actual pathTemplate() call,
        // but in this case we cannot do anything as contentTemplate are more permissive.
        // Since values are coerced to strings in PathTemplates it will be fine in the end.
        pathTemplate(options)
      ]);
    }
    function applyTemplates(options) {
      return (0, base_1.forEach)((0, base_1.when)((path) => path.endsWith(".template"), (0, base_1.composeFileOperators)([
        applyContentTemplate(options),
        // See above for this weird cast.
        applyPathTemplate(options),
        (entry) => {
          return {
            content: entry.content,
            path: entry.path.replace(exports2.TEMPLATE_FILENAME_RE, "")
          };
        }
      ])));
    }
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/rules/url.js
var require_url = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/rules/url.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.url = url3;
    var url_1 = require("url");
    function url3(urlString) {
      const url4 = (0, url_1.parse)(urlString);
      return (context) => context.engine.createSourceFromUrl(url4, context)(context);
    }
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/tree/empty.js
var require_empty2 = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/tree/empty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmptyTree = void 0;
    var host_tree_1 = require_host_tree();
    var EmptyTree = class extends host_tree_1.HostTree {
      constructor() {
        super();
      }
    };
    exports2.EmptyTree = EmptyTree;
  }
});

// ../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/index.js
var require_src2 = __commonJS({
  "../../.yarn/cache/@angular-devkit-schematics-npm-19.1.5-d828b63554-b5e2fd222f.zip/node_modules/@angular-devkit/schematics/src/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || /* @__PURE__ */ function() {
      var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Tree = exports2.workflow = exports2.strings = exports2.formats = exports2.SchematicsException = void 0;
    var core_1 = require_src();
    Object.defineProperty(exports2, "strings", { enumerable: true, get: function() {
      return core_1.strings;
    } });
    var formats = __importStar(require_formats());
    exports2.formats = formats;
    var interface_1 = require_interface3();
    var static_1 = require_static();
    var workflow = __importStar(require_workflow());
    exports2.workflow = workflow;
    var exception_1 = require_exception2();
    Object.defineProperty(exports2, "SchematicsException", { enumerable: true, get: function() {
      return exception_1.SchematicsException;
    } });
    __exportStar(require_action(), exports2);
    __exportStar(require_engine2(), exports2);
    __exportStar(require_exception2(), exports2);
    __exportStar(require_interface3(), exports2);
    __exportStar(require_base2(), exports2);
    __exportStar(require_call(), exports2);
    __exportStar(require_move(), exports2);
    __exportStar(require_random(), exports2);
    __exportStar(require_schematic2(), exports2);
    __exportStar(require_template2(), exports2);
    __exportStar(require_url(), exports2);
    __exportStar(require_delegate(), exports2);
    __exportStar(require_empty2(), exports2);
    __exportStar(require_host_tree(), exports2);
    __exportStar(require_schematic(), exports2);
    __exportStar(require_dryrun(), exports2);
    __exportStar(require_host4(), exports2);
    __exportStar(require_sink(), exports2);
    exports2.Tree = {
      empty() {
        return (0, static_1.empty)();
      },
      branch(tree) {
        return (0, static_1.branch)(tree);
      },
      merge(tree, other, strategy = interface_1.MergeStrategy.Default) {
        return (0, static_1.merge)(tree, other, strategy);
      },
      partition(tree, predicate) {
        return (0, static_1.partition)(tree, predicate);
      },
      optimize(tree) {
        return tree;
      }
    };
  }
});

// src/schematic/index.ts
var index_exports = {};
__export(index_exports, {
  main: () => main
});
module.exports = __toCommonJS(index_exports);

// src/schematic/project/project.factory.ts
var import_schematics9 = __toESM(require_src2(), 1);
var import_schematics10 = __toESM(require_src2(), 1);
var import_schematics11 = __toESM(require_src2(), 1);

// src/schematic/utils/json.utils.ts
var import_strip_json_comments = __toESM(require("strip-json-comments"), 1);
var serializeJson = (json) => `${JSON.stringify(json, null, 2)}
`;
var readJsonInTree = (host, path) => {
  if (!host.exists(path)) {
    throw new Error(`Cannot find ${path}`);
  }
  const contents = (0, import_strip_json_comments.default)(host.read(path)?.toString("utf-8") || "");
  try {
    return JSON.parse(contents);
  } catch (e) {
    const error = e;
    throw new Error(`Cannot parse ${path}: ${error.message}`);
  }
};
var updateJsonInTree = (path, callback) => (host, context) => {
  if (!host.exists(path)) {
    host.create(path, serializeJson(callback({}, context)));
    return host;
  }
  host.overwrite(
    path,
    serializeJson(callback(readJsonInTree(host, path), context))
  );
  return host;
};

// src/schematic/utils/tsconfig.utils.ts
var updateTsConfigInTree = (compilerOptions) => updateJsonInTree("tsconfig.json", (tsconfig) => ({
  ...tsconfig,
  compilerOptions
}));

// src/schematic/rules/update-ts-config.rule.ts
var updateTsConfigRule = async () => {
  const { tsConfig } = await import("@atls/code-runtime");
  return updateTsConfigInTree({
    ...tsConfig.compilerOptions
  });
};

// src/schematic/sources/generate-common.source.ts
var import_core = __toESM(require_src(), 1);
var import_schematics = __toESM(require_src2(), 1);
var import_schematics2 = __toESM(require_src2(), 1);
var import_schematics3 = __toESM(require_src2(), 1);
var import_schematics4 = __toESM(require_src2(), 1);
var generateCommonSource = (options) => (0, import_schematics.apply)((0, import_schematics4.url)("../templates/common"), [
  (0, import_schematics2.template)({
    ...import_core.strings,
    ...options,
    dot: "."
  }),
  (0, import_schematics3.move)("./")
]);

// src/schematic/sources/generate-project-specific.source.ts
var import_node_fs = require("node:fs");
var import_node_path = require("node:path");
var import_core2 = __toESM(require_src(), 1);
var import_schematics5 = __toESM(require_src2(), 1);
var import_schematics6 = __toESM(require_src2(), 1);
var import_schematics7 = __toESM(require_src2(), 1);
var import_schematics8 = __toESM(require_src2(), 1);
var generateProjectSpecificSource = (options) => {
  const { name: projectName } = JSON.parse(
    // eslint-disable-next-line n/no-sync
    (0, import_node_fs.readFileSync)((0, import_node_path.join)(options.cwd, "package.json"), "utf-8")
  );
  return (0, import_schematics5.apply)((0, import_schematics6.url)((0, import_node_path.join)("../templates", options.type)), [
    (0, import_schematics7.template)({
      ...import_core2.strings,
      ...options,
      projectName,
      dot: "."
    }),
    (0, import_schematics8.move)("./")
  ]);
};

// src/schematic/project/project.factory.ts
var main = (options) => (0, import_schematics10.chain)([
  updateTsConfigRule,
  (0, import_schematics11.mergeWith)(generateCommonSource(options), import_schematics9.MergeStrategy.Overwrite),
  (0, import_schematics11.mergeWith)(generateProjectSpecificSource(options), import_schematics9.MergeStrategy.Overwrite)
]);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  main
});
/*! Bundled license information:

@angular-devkit/core/src/json/utils.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/json/schema/utility.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/json/schema/transforms.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/json/schema/interface.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/json/schema/pointer.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/exception.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/utils/literals.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/utils/strings.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/utils/object.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/utils/template.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/utils/partially-ordered-set.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/utils/priority-queue.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/utils/lang.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/utils/index.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/json/schema/visitor.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/json/schema/registry.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/json/schema/schema.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/json/schema/index.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/json/index.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/logger/logger.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/logger/indent.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/logger/level.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/logger/null-logger.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/logger/transform-logger.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/logger/index.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/workspace/definitions.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/virtual-fs/path.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/virtual-fs/host/buffer.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/virtual-fs/host/interface.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/virtual-fs/host/memory.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/virtual-fs/host/sync.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/virtual-fs/host/test.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/virtual-fs/host/resolver.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/virtual-fs/host/alias.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/virtual-fs/host/create.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/virtual-fs/host/empty.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/virtual-fs/host/pattern.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/virtual-fs/host/record.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/virtual-fs/host/safe.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/virtual-fs/host/scoped.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/virtual-fs/host/index.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/virtual-fs/index.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/workspace/host.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/workspace/json/metadata.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/workspace/json/utilities.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/workspace/json/reader.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/workspace/json/writer.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/workspace/core.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/workspace/index.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/src/index.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/formats/html-selector.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/formats/path.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/formats/index.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/tree/interface.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/exception/exception.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/tree/delegate.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/tree/entry.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/tree/recorder.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/tree/scoped.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/tree/host-tree.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/tree/static.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/tree/null.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/rules/call.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/engine/schematic.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/engine/engine.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/engine/interface.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/engine/index.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/node/cli-logger.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/node/host.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/core/node/index.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/tree/action.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/sink/sink.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/sink/host.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/sink/dryrun.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/workflow/base.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/workflow/interface.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/workflow/index.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/rules/base.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/rules/move.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/rules/random.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/rules/schematic.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/rules/template.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/rules/url.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/tree/empty.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular-devkit/schematics/src/index.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)
*/
'

export const writeSchematicFactory = async (path: string) => {
  const content = Buffer.from(schematicFactoryCjsBase64, 'base64').toString('utf-8')
  const fs = await import('fs/promises')
  await fs.writeFile(path, content)
}
