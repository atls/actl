import esbuild from "esbuild";
import {
  readdirSync,
  renameSync,
  statSync,
  mkdirSync,
  copyFileSync,
  readFileSync,
  writeFileSync,
} from "fs";
import { fileURLToPath } from "url";
import { join, extname, basename, dirname, relative } from "path";

// –ò—Å—Ö–æ–¥–Ω–∞—è –∏ –≤—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∏
const dir = fileURLToPath(new URL(".", import.meta.url));
const srcDir = join(dir, "../src/");
const outDir = join(dir, "../dist/");

// –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function getAllFiles(dir, fileList = []) {
  readdirSync(dir).forEach((file) => {
    const fullPath = join(dir, file);
    if (statSync(fullPath).isDirectory()) {
      getAllFiles(fullPath, fileList);
    } else {
      fileList.push(fullPath);
    }
  });
  return fileList;
}

// –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –≤ `dist`
function ensureDirStructure(filePath) {
  const dir = dirname(filePath);
  mkdirSync(dir, { recursive: true });
}

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ `src/`
const allFiles = getAllFiles(srcDir);

// –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º `.ts` –∏ `.js` —Ñ–∞–π–ª—ã
const tsJsFiles = allFiles.filter((file) =>
  [".ts", ".js"].includes(extname(file))
);

// –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∏—Ö —Å –ø–æ–º–æ—â—å—é ESBuild
console.log(tsJsFiles);
await esbuild.build({
  entryPoints: tsJsFiles,
  outdir: outDir,
  outbase: "src",
  format: "cjs",
  platform: "node",
  sourcemap: false,
  target: "esnext",
});

// –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º `.js` —Ñ–∞–π–ª—ã –≤ `.cjs`
getAllFiles(outDir).forEach((file) => {
  if (extname(file) === ".js") {
    const newPath = join(dirname(file), `${basename(file, ".js")}.cjs`);
    renameSync(file, newPath);
  }
});

// –ö–æ–ø–∏—Ä—É–µ–º `.json` —Ñ–∞–π–ª—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
allFiles.forEach((file) => {
  if (extname(file) === ".json") {
    const relativePath = relative(srcDir, file); // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
    const destPath = join(outDir, relativePath); // –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –≤ dist
    ensureDirStructure(destPath); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    copyFileSync(file, destPath); // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
  }
});

// üî• –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã `import('./file.js')` ‚Üí `import('./file.cjs')`
getAllFiles(outDir).forEach((file) => {
  if (extname(file) === ".cjs") {
    let content = readFileSync(file, "utf8");

    // –ó–∞–º–µ–Ω—è–µ–º `import('./module.js')` –Ω–∞ `import('./module.cjs')`
    content = content.replace(/(import$['"]\.\/.*?)(\.js)(['"]$)/g, "$1.cjs$3");

    writeFileSync(file, content);
  }
});

console.log(
  "‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ `.cjs`, `.json` –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π."
);
console.log(
  '‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã `import("./file.js")` –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ `import("./file.cjs")`.'
);
